// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: bind/grpc/proto/chat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountSvc_CreateAccount_FullMethodName            = "/chat.AccountSvc/CreateAccount"
	AccountSvc_GetAccount_FullMethodName               = "/chat.AccountSvc/GetAccount"
	AccountSvc_SetAccountName_FullMethodName           = "/chat.AccountSvc/SetAccountName"
	AccountSvc_SetAccountAvatar_FullMethodName         = "/chat.AccountSvc/SetAccountAvatar"
	AccountSvc_SetAutoAddContact_FullMethodName        = "/chat.AccountSvc/SetAutoAddContact"
	AccountSvc_SetAutoJoinGroup_FullMethodName         = "/chat.AccountSvc/SetAutoJoinGroup"
	AccountSvc_SetAutoDepositMessage_FullMethodName    = "/chat.AccountSvc/SetAutoDepositMessage"
	AccountSvc_SetAccountDepositAddress_FullMethodName = "/chat.AccountSvc/SetAccountDepositAddress"
)

// AccountSvcClient is the client API for AccountSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountSvcClient interface {
	// 创建账号
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountReply, error)
	// 账号信息
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error)
	// 更新名称
	SetAccountName(ctx context.Context, in *SetAccountNameRequest, opts ...grpc.CallOption) (*SetAccountNameReply, error)
	// 更新头像
	SetAccountAvatar(ctx context.Context, in *SetAccountAvatarRequest, opts ...grpc.CallOption) (*SetAccountAvatarReply, error)
	// 设置加人是否审核
	SetAutoAddContact(ctx context.Context, in *SetAutoAddContactRequest, opts ...grpc.CallOption) (*SetAutoAddContactReply, error)
	// 设置入群是否审核
	SetAutoJoinGroup(ctx context.Context, in *SetAutoJoinGroupRequest, opts ...grpc.CallOption) (*SetAutoJoinGroupReply, error)
	// 设置他人不在线时，能给对方发送寄存信息
	SetAutoDepositMessage(ctx context.Context, in *SetAutoDepositMessageRequest, opts ...grpc.CallOption) (*SetAutoDepositMessageReply, error)
	// 设置我不在线时，消息寄存地址
	SetAccountDepositAddress(ctx context.Context, in *SetAccountDepositAddressRequest, opts ...grpc.CallOption) (*SetAccountDepositAddressReply, error)
}

type accountSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountSvcClient(cc grpc.ClientConnInterface) AccountSvcClient {
	return &accountSvcClient{cc}
}

func (c *accountSvcClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountReply, error) {
	out := new(CreateAccountReply)
	err := c.cc.Invoke(ctx, AccountSvc_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error) {
	out := new(GetAccountReply)
	err := c.cc.Invoke(ctx, AccountSvc_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAccountName(ctx context.Context, in *SetAccountNameRequest, opts ...grpc.CallOption) (*SetAccountNameReply, error) {
	out := new(SetAccountNameReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAccountName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAccountAvatar(ctx context.Context, in *SetAccountAvatarRequest, opts ...grpc.CallOption) (*SetAccountAvatarReply, error) {
	out := new(SetAccountAvatarReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAccountAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAutoAddContact(ctx context.Context, in *SetAutoAddContactRequest, opts ...grpc.CallOption) (*SetAutoAddContactReply, error) {
	out := new(SetAutoAddContactReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAutoAddContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAutoJoinGroup(ctx context.Context, in *SetAutoJoinGroupRequest, opts ...grpc.CallOption) (*SetAutoJoinGroupReply, error) {
	out := new(SetAutoJoinGroupReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAutoJoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAutoDepositMessage(ctx context.Context, in *SetAutoDepositMessageRequest, opts ...grpc.CallOption) (*SetAutoDepositMessageReply, error) {
	out := new(SetAutoDepositMessageReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAutoDepositMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAccountDepositAddress(ctx context.Context, in *SetAccountDepositAddressRequest, opts ...grpc.CallOption) (*SetAccountDepositAddressReply, error) {
	out := new(SetAccountDepositAddressReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAccountDepositAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountSvcServer is the server API for AccountSvc service.
// All implementations must embed UnimplementedAccountSvcServer
// for forward compatibility
type AccountSvcServer interface {
	// 创建账号
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountReply, error)
	// 账号信息
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error)
	// 更新名称
	SetAccountName(context.Context, *SetAccountNameRequest) (*SetAccountNameReply, error)
	// 更新头像
	SetAccountAvatar(context.Context, *SetAccountAvatarRequest) (*SetAccountAvatarReply, error)
	// 设置加人是否审核
	SetAutoAddContact(context.Context, *SetAutoAddContactRequest) (*SetAutoAddContactReply, error)
	// 设置入群是否审核
	SetAutoJoinGroup(context.Context, *SetAutoJoinGroupRequest) (*SetAutoJoinGroupReply, error)
	// 设置他人不在线时，能给对方发送寄存信息
	SetAutoDepositMessage(context.Context, *SetAutoDepositMessageRequest) (*SetAutoDepositMessageReply, error)
	// 设置我不在线时，消息寄存地址
	SetAccountDepositAddress(context.Context, *SetAccountDepositAddressRequest) (*SetAccountDepositAddressReply, error)
	mustEmbedUnimplementedAccountSvcServer()
}

// UnimplementedAccountSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAccountSvcServer struct {
}

func (UnimplementedAccountSvcServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountSvcServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountSvcServer) SetAccountName(context.Context, *SetAccountNameRequest) (*SetAccountNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountName not implemented")
}
func (UnimplementedAccountSvcServer) SetAccountAvatar(context.Context, *SetAccountAvatarRequest) (*SetAccountAvatarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountAvatar not implemented")
}
func (UnimplementedAccountSvcServer) SetAutoAddContact(context.Context, *SetAutoAddContactRequest) (*SetAutoAddContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAutoAddContact not implemented")
}
func (UnimplementedAccountSvcServer) SetAutoJoinGroup(context.Context, *SetAutoJoinGroupRequest) (*SetAutoJoinGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAutoJoinGroup not implemented")
}
func (UnimplementedAccountSvcServer) SetAutoDepositMessage(context.Context, *SetAutoDepositMessageRequest) (*SetAutoDepositMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAutoDepositMessage not implemented")
}
func (UnimplementedAccountSvcServer) SetAccountDepositAddress(context.Context, *SetAccountDepositAddressRequest) (*SetAccountDepositAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountDepositAddress not implemented")
}
func (UnimplementedAccountSvcServer) mustEmbedUnimplementedAccountSvcServer() {}

// UnsafeAccountSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountSvcServer will
// result in compilation errors.
type UnsafeAccountSvcServer interface {
	mustEmbedUnimplementedAccountSvcServer()
}

func RegisterAccountSvcServer(s grpc.ServiceRegistrar, srv AccountSvcServer) {
	s.RegisterService(&AccountSvc_ServiceDesc, srv)
}

func _AccountSvc_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAccountName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAccountName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAccountName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAccountName(ctx, req.(*SetAccountNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAccountAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAccountAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAccountAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAccountAvatar(ctx, req.(*SetAccountAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAutoAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAutoAddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAutoAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAutoAddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAutoAddContact(ctx, req.(*SetAutoAddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAutoJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAutoJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAutoJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAutoJoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAutoJoinGroup(ctx, req.(*SetAutoJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAutoDepositMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAutoDepositMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAutoDepositMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAutoDepositMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAutoDepositMessage(ctx, req.(*SetAutoDepositMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAccountDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountDepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAccountDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAccountDepositAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAccountDepositAddress(ctx, req.(*SetAccountDepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountSvc_ServiceDesc is the grpc.ServiceDesc for AccountSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.AccountSvc",
	HandlerType: (*AccountSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _AccountSvc_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountSvc_GetAccount_Handler,
		},
		{
			MethodName: "SetAccountName",
			Handler:    _AccountSvc_SetAccountName_Handler,
		},
		{
			MethodName: "SetAccountAvatar",
			Handler:    _AccountSvc_SetAccountAvatar_Handler,
		},
		{
			MethodName: "SetAutoAddContact",
			Handler:    _AccountSvc_SetAutoAddContact_Handler,
		},
		{
			MethodName: "SetAutoJoinGroup",
			Handler:    _AccountSvc_SetAutoJoinGroup_Handler,
		},
		{
			MethodName: "SetAutoDepositMessage",
			Handler:    _AccountSvc_SetAutoDepositMessage_Handler,
		},
		{
			MethodName: "SetAccountDepositAddress",
			Handler:    _AccountSvc_SetAccountDepositAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	ContactSvc_GetContact_FullMethodName              = "/chat.ContactSvc/GetContact"
	ContactSvc_GetContacts_FullMethodName             = "/chat.ContactSvc/GetContacts"
	ContactSvc_GetSpecifiedContacts_FullMethodName    = "/chat.ContactSvc/GetSpecifiedContacts"
	ContactSvc_GetNearbyPeers_FullMethodName          = "/chat.ContactSvc/GetNearbyPeers"
	ContactSvc_GetContactMessage_FullMethodName       = "/chat.ContactSvc/GetContactMessage"
	ContactSvc_GetContactMessages_FullMethodName      = "/chat.ContactSvc/GetContactMessages"
	ContactSvc_ClearContactMessage_FullMethodName     = "/chat.ContactSvc/ClearContactMessage"
	ContactSvc_SetContactName_FullMethodName          = "/chat.ContactSvc/SetContactName"
	ContactSvc_DeleteContact_FullMethodName           = "/chat.ContactSvc/DeleteContact"
	ContactSvc_ApplyAddContact_FullMethodName         = "/chat.ContactSvc/ApplyAddContact"
	ContactSvc_SendContactTextMessage_FullMethodName  = "/chat.ContactSvc/SendContactTextMessage"
	ContactSvc_SendContactImageMessage_FullMethodName = "/chat.ContactSvc/SendContactImageMessage"
	ContactSvc_SendContactVoiceMessage_FullMethodName = "/chat.ContactSvc/SendContactVoiceMessage"
	ContactSvc_SendContactAudioMessage_FullMethodName = "/chat.ContactSvc/SendContactAudioMessage"
	ContactSvc_SendContactVideoMessage_FullMethodName = "/chat.ContactSvc/SendContactVideoMessage"
	ContactSvc_SendContactFileMessage_FullMethodName  = "/chat.ContactSvc/SendContactFileMessage"
)

// ContactSvcClient is the client API for ContactSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactSvcClient interface {
	// 联系人信息
	GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactReply, error)
	// 获取联系人列表
	GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsReply, error)
	// 获取指定联系人列表
	GetSpecifiedContacts(ctx context.Context, in *GetSpecifiedContactsRequest, opts ...grpc.CallOption) (*GetSpecifiedContactsReply, error)
	// 获取附近的人
	GetNearbyPeers(ctx context.Context, in *GetNearbyPeersRequest, opts ...grpc.CallOption) (ContactSvc_GetNearbyPeersClient, error)
	// 获取单条消息
	GetContactMessage(ctx context.Context, in *GetContactMessageRequest, opts ...grpc.CallOption) (*GetContactMessageReply, error)
	// 获取聊天记录
	GetContactMessages(ctx context.Context, in *GetContactMessagesRequest, opts ...grpc.CallOption) (*GetContactMessagesReply, error)
	// 清空聊天记录
	ClearContactMessage(ctx context.Context, in *ClearContactMessageRequest, opts ...grpc.CallOption) (*ClearContactMessageReply, error)
	// 设置联系人别名
	SetContactName(ctx context.Context, in *SetContactNameRequest, opts ...grpc.CallOption) (*SetContactNameReply, error)
	// 删除联系人
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactReply, error)
	// 申请添加联系人
	ApplyAddContact(ctx context.Context, in *ApplyAddContactRequest, opts ...grpc.CallOption) (*ApplyAddContactReply, error)
	// 发送文本消息
	SendContactTextMessage(ctx context.Context, in *SendContactTextMessageRequest, opts ...grpc.CallOption) (ContactSvc_SendContactTextMessageClient, error)
	// 发送图片消息
	SendContactImageMessage(ctx context.Context, in *SendContactImageMessageRequest, opts ...grpc.CallOption) (ContactSvc_SendContactImageMessageClient, error)
	// 发送语音消息
	SendContactVoiceMessage(ctx context.Context, in *SendContactVoiceMessageRequest, opts ...grpc.CallOption) (ContactSvc_SendContactVoiceMessageClient, error)
	// 发送音频消息
	SendContactAudioMessage(ctx context.Context, in *SendContactAudioMessageRequest, opts ...grpc.CallOption) (ContactSvc_SendContactAudioMessageClient, error)
	// 发送视频消息
	SendContactVideoMessage(ctx context.Context, in *SendContactVideoMessageRequest, opts ...grpc.CallOption) (ContactSvc_SendContactVideoMessageClient, error)
	// 发送文件消息
	SendContactFileMessage(ctx context.Context, in *SendContactFileMessageRequest, opts ...grpc.CallOption) (ContactSvc_SendContactFileMessageClient, error)
}

type contactSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewContactSvcClient(cc grpc.ClientConnInterface) ContactSvcClient {
	return &contactSvcClient{cc}
}

func (c *contactSvcClient) GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactReply, error) {
	out := new(GetContactReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsReply, error) {
	out := new(GetContactsReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetSpecifiedContacts(ctx context.Context, in *GetSpecifiedContactsRequest, opts ...grpc.CallOption) (*GetSpecifiedContactsReply, error) {
	out := new(GetSpecifiedContactsReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetSpecifiedContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetNearbyPeers(ctx context.Context, in *GetNearbyPeersRequest, opts ...grpc.CallOption) (ContactSvc_GetNearbyPeersClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactSvc_ServiceDesc.Streams[0], ContactSvc_GetNearbyPeers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactSvcGetNearbyPeersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContactSvc_GetNearbyPeersClient interface {
	Recv() (*GetNearbyPeersStreamReply, error)
	grpc.ClientStream
}

type contactSvcGetNearbyPeersClient struct {
	grpc.ClientStream
}

func (x *contactSvcGetNearbyPeersClient) Recv() (*GetNearbyPeersStreamReply, error) {
	m := new(GetNearbyPeersStreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactSvcClient) GetContactMessage(ctx context.Context, in *GetContactMessageRequest, opts ...grpc.CallOption) (*GetContactMessageReply, error) {
	out := new(GetContactMessageReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetContactMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetContactMessages(ctx context.Context, in *GetContactMessagesRequest, opts ...grpc.CallOption) (*GetContactMessagesReply, error) {
	out := new(GetContactMessagesReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetContactMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) ClearContactMessage(ctx context.Context, in *ClearContactMessageRequest, opts ...grpc.CallOption) (*ClearContactMessageReply, error) {
	out := new(ClearContactMessageReply)
	err := c.cc.Invoke(ctx, ContactSvc_ClearContactMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) SetContactName(ctx context.Context, in *SetContactNameRequest, opts ...grpc.CallOption) (*SetContactNameReply, error) {
	out := new(SetContactNameReply)
	err := c.cc.Invoke(ctx, ContactSvc_SetContactName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactReply, error) {
	out := new(DeleteContactReply)
	err := c.cc.Invoke(ctx, ContactSvc_DeleteContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) ApplyAddContact(ctx context.Context, in *ApplyAddContactRequest, opts ...grpc.CallOption) (*ApplyAddContactReply, error) {
	out := new(ApplyAddContactReply)
	err := c.cc.Invoke(ctx, ContactSvc_ApplyAddContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) SendContactTextMessage(ctx context.Context, in *SendContactTextMessageRequest, opts ...grpc.CallOption) (ContactSvc_SendContactTextMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactSvc_ServiceDesc.Streams[1], ContactSvc_SendContactTextMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactSvcSendContactTextMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContactSvc_SendContactTextMessageClient interface {
	Recv() (*SendContactMessageReply, error)
	grpc.ClientStream
}

type contactSvcSendContactTextMessageClient struct {
	grpc.ClientStream
}

func (x *contactSvcSendContactTextMessageClient) Recv() (*SendContactMessageReply, error) {
	m := new(SendContactMessageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactSvcClient) SendContactImageMessage(ctx context.Context, in *SendContactImageMessageRequest, opts ...grpc.CallOption) (ContactSvc_SendContactImageMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactSvc_ServiceDesc.Streams[2], ContactSvc_SendContactImageMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactSvcSendContactImageMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContactSvc_SendContactImageMessageClient interface {
	Recv() (*SendContactMessageReply, error)
	grpc.ClientStream
}

type contactSvcSendContactImageMessageClient struct {
	grpc.ClientStream
}

func (x *contactSvcSendContactImageMessageClient) Recv() (*SendContactMessageReply, error) {
	m := new(SendContactMessageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactSvcClient) SendContactVoiceMessage(ctx context.Context, in *SendContactVoiceMessageRequest, opts ...grpc.CallOption) (ContactSvc_SendContactVoiceMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactSvc_ServiceDesc.Streams[3], ContactSvc_SendContactVoiceMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactSvcSendContactVoiceMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContactSvc_SendContactVoiceMessageClient interface {
	Recv() (*SendContactMessageReply, error)
	grpc.ClientStream
}

type contactSvcSendContactVoiceMessageClient struct {
	grpc.ClientStream
}

func (x *contactSvcSendContactVoiceMessageClient) Recv() (*SendContactMessageReply, error) {
	m := new(SendContactMessageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactSvcClient) SendContactAudioMessage(ctx context.Context, in *SendContactAudioMessageRequest, opts ...grpc.CallOption) (ContactSvc_SendContactAudioMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactSvc_ServiceDesc.Streams[4], ContactSvc_SendContactAudioMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactSvcSendContactAudioMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContactSvc_SendContactAudioMessageClient interface {
	Recv() (*SendContactMessageReply, error)
	grpc.ClientStream
}

type contactSvcSendContactAudioMessageClient struct {
	grpc.ClientStream
}

func (x *contactSvcSendContactAudioMessageClient) Recv() (*SendContactMessageReply, error) {
	m := new(SendContactMessageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactSvcClient) SendContactVideoMessage(ctx context.Context, in *SendContactVideoMessageRequest, opts ...grpc.CallOption) (ContactSvc_SendContactVideoMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactSvc_ServiceDesc.Streams[5], ContactSvc_SendContactVideoMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactSvcSendContactVideoMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContactSvc_SendContactVideoMessageClient interface {
	Recv() (*SendContactMessageReply, error)
	grpc.ClientStream
}

type contactSvcSendContactVideoMessageClient struct {
	grpc.ClientStream
}

func (x *contactSvcSendContactVideoMessageClient) Recv() (*SendContactMessageReply, error) {
	m := new(SendContactMessageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactSvcClient) SendContactFileMessage(ctx context.Context, in *SendContactFileMessageRequest, opts ...grpc.CallOption) (ContactSvc_SendContactFileMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactSvc_ServiceDesc.Streams[6], ContactSvc_SendContactFileMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactSvcSendContactFileMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContactSvc_SendContactFileMessageClient interface {
	Recv() (*SendContactMessageReply, error)
	grpc.ClientStream
}

type contactSvcSendContactFileMessageClient struct {
	grpc.ClientStream
}

func (x *contactSvcSendContactFileMessageClient) Recv() (*SendContactMessageReply, error) {
	m := new(SendContactMessageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContactSvcServer is the server API for ContactSvc service.
// All implementations must embed UnimplementedContactSvcServer
// for forward compatibility
type ContactSvcServer interface {
	// 联系人信息
	GetContact(context.Context, *GetContactRequest) (*GetContactReply, error)
	// 获取联系人列表
	GetContacts(context.Context, *GetContactsRequest) (*GetContactsReply, error)
	// 获取指定联系人列表
	GetSpecifiedContacts(context.Context, *GetSpecifiedContactsRequest) (*GetSpecifiedContactsReply, error)
	// 获取附近的人
	GetNearbyPeers(*GetNearbyPeersRequest, ContactSvc_GetNearbyPeersServer) error
	// 获取单条消息
	GetContactMessage(context.Context, *GetContactMessageRequest) (*GetContactMessageReply, error)
	// 获取聊天记录
	GetContactMessages(context.Context, *GetContactMessagesRequest) (*GetContactMessagesReply, error)
	// 清空聊天记录
	ClearContactMessage(context.Context, *ClearContactMessageRequest) (*ClearContactMessageReply, error)
	// 设置联系人别名
	SetContactName(context.Context, *SetContactNameRequest) (*SetContactNameReply, error)
	// 删除联系人
	DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactReply, error)
	// 申请添加联系人
	ApplyAddContact(context.Context, *ApplyAddContactRequest) (*ApplyAddContactReply, error)
	// 发送文本消息
	SendContactTextMessage(*SendContactTextMessageRequest, ContactSvc_SendContactTextMessageServer) error
	// 发送图片消息
	SendContactImageMessage(*SendContactImageMessageRequest, ContactSvc_SendContactImageMessageServer) error
	// 发送语音消息
	SendContactVoiceMessage(*SendContactVoiceMessageRequest, ContactSvc_SendContactVoiceMessageServer) error
	// 发送音频消息
	SendContactAudioMessage(*SendContactAudioMessageRequest, ContactSvc_SendContactAudioMessageServer) error
	// 发送视频消息
	SendContactVideoMessage(*SendContactVideoMessageRequest, ContactSvc_SendContactVideoMessageServer) error
	// 发送文件消息
	SendContactFileMessage(*SendContactFileMessageRequest, ContactSvc_SendContactFileMessageServer) error
	mustEmbedUnimplementedContactSvcServer()
}

// UnimplementedContactSvcServer must be embedded to have forward compatible implementations.
type UnimplementedContactSvcServer struct {
}

func (UnimplementedContactSvcServer) GetContact(context.Context, *GetContactRequest) (*GetContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedContactSvcServer) GetContacts(context.Context, *GetContactsRequest) (*GetContactsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (UnimplementedContactSvcServer) GetSpecifiedContacts(context.Context, *GetSpecifiedContactsRequest) (*GetSpecifiedContactsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecifiedContacts not implemented")
}
func (UnimplementedContactSvcServer) GetNearbyPeers(*GetNearbyPeersRequest, ContactSvc_GetNearbyPeersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNearbyPeers not implemented")
}
func (UnimplementedContactSvcServer) GetContactMessage(context.Context, *GetContactMessageRequest) (*GetContactMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactMessage not implemented")
}
func (UnimplementedContactSvcServer) GetContactMessages(context.Context, *GetContactMessagesRequest) (*GetContactMessagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactMessages not implemented")
}
func (UnimplementedContactSvcServer) ClearContactMessage(context.Context, *ClearContactMessageRequest) (*ClearContactMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearContactMessage not implemented")
}
func (UnimplementedContactSvcServer) SetContactName(context.Context, *SetContactNameRequest) (*SetContactNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContactName not implemented")
}
func (UnimplementedContactSvcServer) DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedContactSvcServer) ApplyAddContact(context.Context, *ApplyAddContactRequest) (*ApplyAddContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyAddContact not implemented")
}
func (UnimplementedContactSvcServer) SendContactTextMessage(*SendContactTextMessageRequest, ContactSvc_SendContactTextMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendContactTextMessage not implemented")
}
func (UnimplementedContactSvcServer) SendContactImageMessage(*SendContactImageMessageRequest, ContactSvc_SendContactImageMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendContactImageMessage not implemented")
}
func (UnimplementedContactSvcServer) SendContactVoiceMessage(*SendContactVoiceMessageRequest, ContactSvc_SendContactVoiceMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendContactVoiceMessage not implemented")
}
func (UnimplementedContactSvcServer) SendContactAudioMessage(*SendContactAudioMessageRequest, ContactSvc_SendContactAudioMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendContactAudioMessage not implemented")
}
func (UnimplementedContactSvcServer) SendContactVideoMessage(*SendContactVideoMessageRequest, ContactSvc_SendContactVideoMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendContactVideoMessage not implemented")
}
func (UnimplementedContactSvcServer) SendContactFileMessage(*SendContactFileMessageRequest, ContactSvc_SendContactFileMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendContactFileMessage not implemented")
}
func (UnimplementedContactSvcServer) mustEmbedUnimplementedContactSvcServer() {}

// UnsafeContactSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactSvcServer will
// result in compilation errors.
type UnsafeContactSvcServer interface {
	mustEmbedUnimplementedContactSvcServer()
}

func RegisterContactSvcServer(s grpc.ServiceRegistrar, srv ContactSvcServer) {
	s.RegisterService(&ContactSvc_ServiceDesc, srv)
}

func _ContactSvc_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetContact(ctx, req.(*GetContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetContacts(ctx, req.(*GetContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetSpecifiedContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecifiedContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetSpecifiedContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetSpecifiedContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetSpecifiedContacts(ctx, req.(*GetSpecifiedContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetNearbyPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetNearbyPeersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContactSvcServer).GetNearbyPeers(m, &contactSvcGetNearbyPeersServer{stream})
}

type ContactSvc_GetNearbyPeersServer interface {
	Send(*GetNearbyPeersStreamReply) error
	grpc.ServerStream
}

type contactSvcGetNearbyPeersServer struct {
	grpc.ServerStream
}

func (x *contactSvcGetNearbyPeersServer) Send(m *GetNearbyPeersStreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ContactSvc_GetContactMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetContactMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetContactMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetContactMessage(ctx, req.(*GetContactMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetContactMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetContactMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetContactMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetContactMessages(ctx, req.(*GetContactMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_ClearContactMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearContactMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).ClearContactMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_ClearContactMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).ClearContactMessage(ctx, req.(*ClearContactMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_SetContactName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetContactNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).SetContactName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_SetContactName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).SetContactName(ctx, req.(*SetContactNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_ApplyAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyAddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).ApplyAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_ApplyAddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).ApplyAddContact(ctx, req.(*ApplyAddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_SendContactTextMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendContactTextMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContactSvcServer).SendContactTextMessage(m, &contactSvcSendContactTextMessageServer{stream})
}

type ContactSvc_SendContactTextMessageServer interface {
	Send(*SendContactMessageReply) error
	grpc.ServerStream
}

type contactSvcSendContactTextMessageServer struct {
	grpc.ServerStream
}

func (x *contactSvcSendContactTextMessageServer) Send(m *SendContactMessageReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ContactSvc_SendContactImageMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendContactImageMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContactSvcServer).SendContactImageMessage(m, &contactSvcSendContactImageMessageServer{stream})
}

type ContactSvc_SendContactImageMessageServer interface {
	Send(*SendContactMessageReply) error
	grpc.ServerStream
}

type contactSvcSendContactImageMessageServer struct {
	grpc.ServerStream
}

func (x *contactSvcSendContactImageMessageServer) Send(m *SendContactMessageReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ContactSvc_SendContactVoiceMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendContactVoiceMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContactSvcServer).SendContactVoiceMessage(m, &contactSvcSendContactVoiceMessageServer{stream})
}

type ContactSvc_SendContactVoiceMessageServer interface {
	Send(*SendContactMessageReply) error
	grpc.ServerStream
}

type contactSvcSendContactVoiceMessageServer struct {
	grpc.ServerStream
}

func (x *contactSvcSendContactVoiceMessageServer) Send(m *SendContactMessageReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ContactSvc_SendContactAudioMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendContactAudioMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContactSvcServer).SendContactAudioMessage(m, &contactSvcSendContactAudioMessageServer{stream})
}

type ContactSvc_SendContactAudioMessageServer interface {
	Send(*SendContactMessageReply) error
	grpc.ServerStream
}

type contactSvcSendContactAudioMessageServer struct {
	grpc.ServerStream
}

func (x *contactSvcSendContactAudioMessageServer) Send(m *SendContactMessageReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ContactSvc_SendContactVideoMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendContactVideoMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContactSvcServer).SendContactVideoMessage(m, &contactSvcSendContactVideoMessageServer{stream})
}

type ContactSvc_SendContactVideoMessageServer interface {
	Send(*SendContactMessageReply) error
	grpc.ServerStream
}

type contactSvcSendContactVideoMessageServer struct {
	grpc.ServerStream
}

func (x *contactSvcSendContactVideoMessageServer) Send(m *SendContactMessageReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ContactSvc_SendContactFileMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendContactFileMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContactSvcServer).SendContactFileMessage(m, &contactSvcSendContactFileMessageServer{stream})
}

type ContactSvc_SendContactFileMessageServer interface {
	Send(*SendContactMessageReply) error
	grpc.ServerStream
}

type contactSvcSendContactFileMessageServer struct {
	grpc.ServerStream
}

func (x *contactSvcSendContactFileMessageServer) Send(m *SendContactMessageReply) error {
	return x.ServerStream.SendMsg(m)
}

// ContactSvc_ServiceDesc is the grpc.ServiceDesc for ContactSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ContactSvc",
	HandlerType: (*ContactSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContact",
			Handler:    _ContactSvc_GetContact_Handler,
		},
		{
			MethodName: "GetContacts",
			Handler:    _ContactSvc_GetContacts_Handler,
		},
		{
			MethodName: "GetSpecifiedContacts",
			Handler:    _ContactSvc_GetSpecifiedContacts_Handler,
		},
		{
			MethodName: "GetContactMessage",
			Handler:    _ContactSvc_GetContactMessage_Handler,
		},
		{
			MethodName: "GetContactMessages",
			Handler:    _ContactSvc_GetContactMessages_Handler,
		},
		{
			MethodName: "ClearContactMessage",
			Handler:    _ContactSvc_ClearContactMessage_Handler,
		},
		{
			MethodName: "SetContactName",
			Handler:    _ContactSvc_SetContactName_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _ContactSvc_DeleteContact_Handler,
		},
		{
			MethodName: "ApplyAddContact",
			Handler:    _ContactSvc_ApplyAddContact_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNearbyPeers",
			Handler:       _ContactSvc_GetNearbyPeers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendContactTextMessage",
			Handler:       _ContactSvc_SendContactTextMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendContactImageMessage",
			Handler:       _ContactSvc_SendContactImageMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendContactVoiceMessage",
			Handler:       _ContactSvc_SendContactVoiceMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendContactAudioMessage",
			Handler:       _ContactSvc_SendContactAudioMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendContactVideoMessage",
			Handler:       _ContactSvc_SendContactVideoMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendContactFileMessage",
			Handler:       _ContactSvc_SendContactFileMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	GroupSvc_CreateGroup_FullMethodName            = "/chat.GroupSvc/CreateGroup"
	GroupSvc_GetGroup_FullMethodName               = "/chat.GroupSvc/GetGroup"
	GroupSvc_GetGroupDetail_FullMethodName         = "/chat.GroupSvc/GetGroupDetail"
	GroupSvc_GetGroups_FullMethodName              = "/chat.GroupSvc/GetGroups"
	GroupSvc_SetGroupName_FullMethodName           = "/chat.GroupSvc/SetGroupName"
	GroupSvc_SetGroupAvatar_FullMethodName         = "/chat.GroupSvc/SetGroupAvatar"
	GroupSvc_SetGroupNotice_FullMethodName         = "/chat.GroupSvc/SetGroupNotice"
	GroupSvc_SetGroupAutoJoin_FullMethodName       = "/chat.GroupSvc/SetGroupAutoJoin"
	GroupSvc_SetGroupDepositAddress_FullMethodName = "/chat.GroupSvc/SetGroupDepositAddress"
	GroupSvc_ExitGroup_FullMethodName              = "/chat.GroupSvc/ExitGroup"
	GroupSvc_DeleteGroup_FullMethodName            = "/chat.GroupSvc/DeleteGroup"
	GroupSvc_DisbandGroup_FullMethodName           = "/chat.GroupSvc/DisbandGroup"
	GroupSvc_GetGroupMembers_FullMethodName        = "/chat.GroupSvc/GetGroupMembers"
	GroupSvc_RemoveGroupMember_FullMethodName      = "/chat.GroupSvc/RemoveGroupMember"
	GroupSvc_GetGroupMessage_FullMethodName        = "/chat.GroupSvc/GetGroupMessage"
	GroupSvc_GetGroupMessages_FullMethodName       = "/chat.GroupSvc/GetGroupMessages"
	GroupSvc_ClearGroupMessage_FullMethodName      = "/chat.GroupSvc/ClearGroupMessage"
	GroupSvc_SendGroupTextMessage_FullMethodName   = "/chat.GroupSvc/SendGroupTextMessage"
	GroupSvc_SendGroupImageMessage_FullMethodName  = "/chat.GroupSvc/SendGroupImageMessage"
	GroupSvc_SendGroupVoiceMessage_FullMethodName  = "/chat.GroupSvc/SendGroupVoiceMessage"
	GroupSvc_SendGroupAudioMessage_FullMethodName  = "/chat.GroupSvc/SendGroupAudioMessage"
	GroupSvc_SendGroupVideoMessage_FullMethodName  = "/chat.GroupSvc/SendGroupVideoMessage"
	GroupSvc_SendGroupFileMessage_FullMethodName   = "/chat.GroupSvc/SendGroupFileMessage"
)

// GroupSvcClient is the client API for GroupSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupSvcClient interface {
	// 创建群
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupReply, error)
	// 获取群详情
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error)
	// 获取群详情
	GetGroupDetail(ctx context.Context, in *GetGroupDetailRequest, opts ...grpc.CallOption) (*GetGroupDetailReply, error)
	// 获取群列表
	GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsReply, error)
	// 设置名称
	SetGroupName(ctx context.Context, in *SetGroupNameRequest, opts ...grpc.CallOption) (*SetGroupNameReply, error)
	// 设置头像（管理员操作）
	SetGroupAvatar(ctx context.Context, in *SetGroupAvatarRequest, opts ...grpc.CallOption) (*SetGroupAvatarReply, error)
	// 设置群公告
	SetGroupNotice(ctx context.Context, in *SetGroupNoticeRequest, opts ...grpc.CallOption) (*SetGroupNoticeReply, error)
	// 设置入群是否审核
	SetGroupAutoJoin(ctx context.Context, in *SetGroupAutoJoinRequest, opts ...grpc.CallOption) (*SetGroupAutoJoinReply, error)
	// 设置入群消息寄存地址
	SetGroupDepositAddress(ctx context.Context, in *SetGroupDepositAddressRequest, opts ...grpc.CallOption) (*SetGroupDepositAddressReply, error)
	// 退出此群
	ExitGroup(ctx context.Context, in *ExitGroupRequest, opts ...grpc.CallOption) (*ExitGroupReply, error)
	// 退出并删除此群
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupReply, error)
	// 解散此群
	DisbandGroup(ctx context.Context, in *DisbandGroupRequest, opts ...grpc.CallOption) (*DisbandGroupReply, error)
	// 群成员列表
	GetGroupMembers(ctx context.Context, in *GetGroupMembersRequest, opts ...grpc.CallOption) (*GetGroupMembersReply, error)
	// 移除群成员
	RemoveGroupMember(ctx context.Context, in *RemoveGroupMemberRequest, opts ...grpc.CallOption) (*RemoveGroupMemberReply, error)
	// 获取聊天记录
	GetGroupMessage(ctx context.Context, in *GetGroupMessageRequest, opts ...grpc.CallOption) (*GetGroupMessageReply, error)
	// 获取聊天记录
	GetGroupMessages(ctx context.Context, in *GetGroupMessagesRequest, opts ...grpc.CallOption) (*GetGroupMessagesReply, error)
	// 清空聊天记录
	ClearGroupMessage(ctx context.Context, in *ClearGroupMessageRequest, opts ...grpc.CallOption) (*ClearGroupMessageReply, error)
	// 发送消息
	SendGroupTextMessage(ctx context.Context, in *SendGroupTextMessageRequest, opts ...grpc.CallOption) (GroupSvc_SendGroupTextMessageClient, error)
	// 发送图片消息
	SendGroupImageMessage(ctx context.Context, in *SendGroupImageMessageRequest, opts ...grpc.CallOption) (GroupSvc_SendGroupImageMessageClient, error)
	// 发送语音消息
	SendGroupVoiceMessage(ctx context.Context, in *SendGroupVoiceMessageRequest, opts ...grpc.CallOption) (GroupSvc_SendGroupVoiceMessageClient, error)
	// 发送音频消息
	SendGroupAudioMessage(ctx context.Context, in *SendGroupAudioMessageRequest, opts ...grpc.CallOption) (GroupSvc_SendGroupAudioMessageClient, error)
	// 发送视频消息
	SendGroupVideoMessage(ctx context.Context, in *SendGroupVideoMessageRequest, opts ...grpc.CallOption) (GroupSvc_SendGroupVideoMessageClient, error)
	// 发送文件消息
	SendGroupFileMessage(ctx context.Context, in *SendGroupFileMessageRequest, opts ...grpc.CallOption) (GroupSvc_SendGroupFileMessageClient, error)
}

type groupSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupSvcClient(cc grpc.ClientConnInterface) GroupSvcClient {
	return &groupSvcClient{cc}
}

func (c *groupSvcClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupReply, error) {
	out := new(CreateGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error) {
	out := new(GetGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroupDetail(ctx context.Context, in *GetGroupDetailRequest, opts ...grpc.CallOption) (*GetGroupDetailReply, error) {
	out := new(GetGroupDetailReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroupDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsReply, error) {
	out := new(GetGroupsReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SetGroupName(ctx context.Context, in *SetGroupNameRequest, opts ...grpc.CallOption) (*SetGroupNameReply, error) {
	out := new(SetGroupNameReply)
	err := c.cc.Invoke(ctx, GroupSvc_SetGroupName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SetGroupAvatar(ctx context.Context, in *SetGroupAvatarRequest, opts ...grpc.CallOption) (*SetGroupAvatarReply, error) {
	out := new(SetGroupAvatarReply)
	err := c.cc.Invoke(ctx, GroupSvc_SetGroupAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SetGroupNotice(ctx context.Context, in *SetGroupNoticeRequest, opts ...grpc.CallOption) (*SetGroupNoticeReply, error) {
	out := new(SetGroupNoticeReply)
	err := c.cc.Invoke(ctx, GroupSvc_SetGroupNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SetGroupAutoJoin(ctx context.Context, in *SetGroupAutoJoinRequest, opts ...grpc.CallOption) (*SetGroupAutoJoinReply, error) {
	out := new(SetGroupAutoJoinReply)
	err := c.cc.Invoke(ctx, GroupSvc_SetGroupAutoJoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SetGroupDepositAddress(ctx context.Context, in *SetGroupDepositAddressRequest, opts ...grpc.CallOption) (*SetGroupDepositAddressReply, error) {
	out := new(SetGroupDepositAddressReply)
	err := c.cc.Invoke(ctx, GroupSvc_SetGroupDepositAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) ExitGroup(ctx context.Context, in *ExitGroupRequest, opts ...grpc.CallOption) (*ExitGroupReply, error) {
	out := new(ExitGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_ExitGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupReply, error) {
	out := new(DeleteGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) DisbandGroup(ctx context.Context, in *DisbandGroupRequest, opts ...grpc.CallOption) (*DisbandGroupReply, error) {
	out := new(DisbandGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_DisbandGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroupMembers(ctx context.Context, in *GetGroupMembersRequest, opts ...grpc.CallOption) (*GetGroupMembersReply, error) {
	out := new(GetGroupMembersReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroupMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) RemoveGroupMember(ctx context.Context, in *RemoveGroupMemberRequest, opts ...grpc.CallOption) (*RemoveGroupMemberReply, error) {
	out := new(RemoveGroupMemberReply)
	err := c.cc.Invoke(ctx, GroupSvc_RemoveGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroupMessage(ctx context.Context, in *GetGroupMessageRequest, opts ...grpc.CallOption) (*GetGroupMessageReply, error) {
	out := new(GetGroupMessageReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroupMessages(ctx context.Context, in *GetGroupMessagesRequest, opts ...grpc.CallOption) (*GetGroupMessagesReply, error) {
	out := new(GetGroupMessagesReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroupMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) ClearGroupMessage(ctx context.Context, in *ClearGroupMessageRequest, opts ...grpc.CallOption) (*ClearGroupMessageReply, error) {
	out := new(ClearGroupMessageReply)
	err := c.cc.Invoke(ctx, GroupSvc_ClearGroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SendGroupTextMessage(ctx context.Context, in *SendGroupTextMessageRequest, opts ...grpc.CallOption) (GroupSvc_SendGroupTextMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupSvc_ServiceDesc.Streams[0], GroupSvc_SendGroupTextMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groupSvcSendGroupTextMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupSvc_SendGroupTextMessageClient interface {
	Recv() (*SendGroupMessageReply, error)
	grpc.ClientStream
}

type groupSvcSendGroupTextMessageClient struct {
	grpc.ClientStream
}

func (x *groupSvcSendGroupTextMessageClient) Recv() (*SendGroupMessageReply, error) {
	m := new(SendGroupMessageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupSvcClient) SendGroupImageMessage(ctx context.Context, in *SendGroupImageMessageRequest, opts ...grpc.CallOption) (GroupSvc_SendGroupImageMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupSvc_ServiceDesc.Streams[1], GroupSvc_SendGroupImageMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groupSvcSendGroupImageMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupSvc_SendGroupImageMessageClient interface {
	Recv() (*SendGroupMessageReply, error)
	grpc.ClientStream
}

type groupSvcSendGroupImageMessageClient struct {
	grpc.ClientStream
}

func (x *groupSvcSendGroupImageMessageClient) Recv() (*SendGroupMessageReply, error) {
	m := new(SendGroupMessageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupSvcClient) SendGroupVoiceMessage(ctx context.Context, in *SendGroupVoiceMessageRequest, opts ...grpc.CallOption) (GroupSvc_SendGroupVoiceMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupSvc_ServiceDesc.Streams[2], GroupSvc_SendGroupVoiceMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groupSvcSendGroupVoiceMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupSvc_SendGroupVoiceMessageClient interface {
	Recv() (*SendGroupMessageReply, error)
	grpc.ClientStream
}

type groupSvcSendGroupVoiceMessageClient struct {
	grpc.ClientStream
}

func (x *groupSvcSendGroupVoiceMessageClient) Recv() (*SendGroupMessageReply, error) {
	m := new(SendGroupMessageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupSvcClient) SendGroupAudioMessage(ctx context.Context, in *SendGroupAudioMessageRequest, opts ...grpc.CallOption) (GroupSvc_SendGroupAudioMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupSvc_ServiceDesc.Streams[3], GroupSvc_SendGroupAudioMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groupSvcSendGroupAudioMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupSvc_SendGroupAudioMessageClient interface {
	Recv() (*SendGroupMessageReply, error)
	grpc.ClientStream
}

type groupSvcSendGroupAudioMessageClient struct {
	grpc.ClientStream
}

func (x *groupSvcSendGroupAudioMessageClient) Recv() (*SendGroupMessageReply, error) {
	m := new(SendGroupMessageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupSvcClient) SendGroupVideoMessage(ctx context.Context, in *SendGroupVideoMessageRequest, opts ...grpc.CallOption) (GroupSvc_SendGroupVideoMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupSvc_ServiceDesc.Streams[4], GroupSvc_SendGroupVideoMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groupSvcSendGroupVideoMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupSvc_SendGroupVideoMessageClient interface {
	Recv() (*SendGroupMessageReply, error)
	grpc.ClientStream
}

type groupSvcSendGroupVideoMessageClient struct {
	grpc.ClientStream
}

func (x *groupSvcSendGroupVideoMessageClient) Recv() (*SendGroupMessageReply, error) {
	m := new(SendGroupMessageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupSvcClient) SendGroupFileMessage(ctx context.Context, in *SendGroupFileMessageRequest, opts ...grpc.CallOption) (GroupSvc_SendGroupFileMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupSvc_ServiceDesc.Streams[5], GroupSvc_SendGroupFileMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groupSvcSendGroupFileMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupSvc_SendGroupFileMessageClient interface {
	Recv() (*SendGroupMessageReply, error)
	grpc.ClientStream
}

type groupSvcSendGroupFileMessageClient struct {
	grpc.ClientStream
}

func (x *groupSvcSendGroupFileMessageClient) Recv() (*SendGroupMessageReply, error) {
	m := new(SendGroupMessageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GroupSvcServer is the server API for GroupSvc service.
// All implementations must embed UnimplementedGroupSvcServer
// for forward compatibility
type GroupSvcServer interface {
	// 创建群
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupReply, error)
	// 获取群详情
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error)
	// 获取群详情
	GetGroupDetail(context.Context, *GetGroupDetailRequest) (*GetGroupDetailReply, error)
	// 获取群列表
	GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsReply, error)
	// 设置名称
	SetGroupName(context.Context, *SetGroupNameRequest) (*SetGroupNameReply, error)
	// 设置头像（管理员操作）
	SetGroupAvatar(context.Context, *SetGroupAvatarRequest) (*SetGroupAvatarReply, error)
	// 设置群公告
	SetGroupNotice(context.Context, *SetGroupNoticeRequest) (*SetGroupNoticeReply, error)
	// 设置入群是否审核
	SetGroupAutoJoin(context.Context, *SetGroupAutoJoinRequest) (*SetGroupAutoJoinReply, error)
	// 设置入群消息寄存地址
	SetGroupDepositAddress(context.Context, *SetGroupDepositAddressRequest) (*SetGroupDepositAddressReply, error)
	// 退出此群
	ExitGroup(context.Context, *ExitGroupRequest) (*ExitGroupReply, error)
	// 退出并删除此群
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupReply, error)
	// 解散此群
	DisbandGroup(context.Context, *DisbandGroupRequest) (*DisbandGroupReply, error)
	// 群成员列表
	GetGroupMembers(context.Context, *GetGroupMembersRequest) (*GetGroupMembersReply, error)
	// 移除群成员
	RemoveGroupMember(context.Context, *RemoveGroupMemberRequest) (*RemoveGroupMemberReply, error)
	// 获取聊天记录
	GetGroupMessage(context.Context, *GetGroupMessageRequest) (*GetGroupMessageReply, error)
	// 获取聊天记录
	GetGroupMessages(context.Context, *GetGroupMessagesRequest) (*GetGroupMessagesReply, error)
	// 清空聊天记录
	ClearGroupMessage(context.Context, *ClearGroupMessageRequest) (*ClearGroupMessageReply, error)
	// 发送消息
	SendGroupTextMessage(*SendGroupTextMessageRequest, GroupSvc_SendGroupTextMessageServer) error
	// 发送图片消息
	SendGroupImageMessage(*SendGroupImageMessageRequest, GroupSvc_SendGroupImageMessageServer) error
	// 发送语音消息
	SendGroupVoiceMessage(*SendGroupVoiceMessageRequest, GroupSvc_SendGroupVoiceMessageServer) error
	// 发送音频消息
	SendGroupAudioMessage(*SendGroupAudioMessageRequest, GroupSvc_SendGroupAudioMessageServer) error
	// 发送视频消息
	SendGroupVideoMessage(*SendGroupVideoMessageRequest, GroupSvc_SendGroupVideoMessageServer) error
	// 发送文件消息
	SendGroupFileMessage(*SendGroupFileMessageRequest, GroupSvc_SendGroupFileMessageServer) error
	mustEmbedUnimplementedGroupSvcServer()
}

// UnimplementedGroupSvcServer must be embedded to have forward compatible implementations.
type UnimplementedGroupSvcServer struct {
}

func (UnimplementedGroupSvcServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupSvcServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupSvcServer) GetGroupDetail(context.Context, *GetGroupDetailRequest) (*GetGroupDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupDetail not implemented")
}
func (UnimplementedGroupSvcServer) GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedGroupSvcServer) SetGroupName(context.Context, *SetGroupNameRequest) (*SetGroupNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupName not implemented")
}
func (UnimplementedGroupSvcServer) SetGroupAvatar(context.Context, *SetGroupAvatarRequest) (*SetGroupAvatarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupAvatar not implemented")
}
func (UnimplementedGroupSvcServer) SetGroupNotice(context.Context, *SetGroupNoticeRequest) (*SetGroupNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupNotice not implemented")
}
func (UnimplementedGroupSvcServer) SetGroupAutoJoin(context.Context, *SetGroupAutoJoinRequest) (*SetGroupAutoJoinReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupAutoJoin not implemented")
}
func (UnimplementedGroupSvcServer) SetGroupDepositAddress(context.Context, *SetGroupDepositAddressRequest) (*SetGroupDepositAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupDepositAddress not implemented")
}
func (UnimplementedGroupSvcServer) ExitGroup(context.Context, *ExitGroupRequest) (*ExitGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitGroup not implemented")
}
func (UnimplementedGroupSvcServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupSvcServer) DisbandGroup(context.Context, *DisbandGroupRequest) (*DisbandGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisbandGroup not implemented")
}
func (UnimplementedGroupSvcServer) GetGroupMembers(context.Context, *GetGroupMembersRequest) (*GetGroupMembersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMembers not implemented")
}
func (UnimplementedGroupSvcServer) RemoveGroupMember(context.Context, *RemoveGroupMemberRequest) (*RemoveGroupMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupMember not implemented")
}
func (UnimplementedGroupSvcServer) GetGroupMessage(context.Context, *GetGroupMessageRequest) (*GetGroupMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMessage not implemented")
}
func (UnimplementedGroupSvcServer) GetGroupMessages(context.Context, *GetGroupMessagesRequest) (*GetGroupMessagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMessages not implemented")
}
func (UnimplementedGroupSvcServer) ClearGroupMessage(context.Context, *ClearGroupMessageRequest) (*ClearGroupMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearGroupMessage not implemented")
}
func (UnimplementedGroupSvcServer) SendGroupTextMessage(*SendGroupTextMessageRequest, GroupSvc_SendGroupTextMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendGroupTextMessage not implemented")
}
func (UnimplementedGroupSvcServer) SendGroupImageMessage(*SendGroupImageMessageRequest, GroupSvc_SendGroupImageMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendGroupImageMessage not implemented")
}
func (UnimplementedGroupSvcServer) SendGroupVoiceMessage(*SendGroupVoiceMessageRequest, GroupSvc_SendGroupVoiceMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendGroupVoiceMessage not implemented")
}
func (UnimplementedGroupSvcServer) SendGroupAudioMessage(*SendGroupAudioMessageRequest, GroupSvc_SendGroupAudioMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendGroupAudioMessage not implemented")
}
func (UnimplementedGroupSvcServer) SendGroupVideoMessage(*SendGroupVideoMessageRequest, GroupSvc_SendGroupVideoMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendGroupVideoMessage not implemented")
}
func (UnimplementedGroupSvcServer) SendGroupFileMessage(*SendGroupFileMessageRequest, GroupSvc_SendGroupFileMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendGroupFileMessage not implemented")
}
func (UnimplementedGroupSvcServer) mustEmbedUnimplementedGroupSvcServer() {}

// UnsafeGroupSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupSvcServer will
// result in compilation errors.
type UnsafeGroupSvcServer interface {
	mustEmbedUnimplementedGroupSvcServer()
}

func RegisterGroupSvcServer(s grpc.ServiceRegistrar, srv GroupSvcServer) {
	s.RegisterService(&GroupSvc_ServiceDesc, srv)
}

func _GroupSvc_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroupDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroupDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroupDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroupDetail(ctx, req.(*GetGroupDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroups(ctx, req.(*GetGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SetGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SetGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SetGroupName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SetGroupName(ctx, req.(*SetGroupNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SetGroupAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SetGroupAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SetGroupAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SetGroupAvatar(ctx, req.(*SetGroupAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SetGroupNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SetGroupNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SetGroupNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SetGroupNotice(ctx, req.(*SetGroupNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SetGroupAutoJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupAutoJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SetGroupAutoJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SetGroupAutoJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SetGroupAutoJoin(ctx, req.(*SetGroupAutoJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SetGroupDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupDepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SetGroupDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SetGroupDepositAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SetGroupDepositAddress(ctx, req.(*SetGroupDepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_ExitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).ExitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_ExitGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).ExitGroup(ctx, req.(*ExitGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_DisbandGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisbandGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).DisbandGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_DisbandGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).DisbandGroup(ctx, req.(*DisbandGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroupMembers(ctx, req.(*GetGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_RemoveGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).RemoveGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_RemoveGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).RemoveGroupMember(ctx, req.(*RemoveGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroupMessage(ctx, req.(*GetGroupMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroupMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroupMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroupMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroupMessages(ctx, req.(*GetGroupMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_ClearGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearGroupMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).ClearGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_ClearGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).ClearGroupMessage(ctx, req.(*ClearGroupMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SendGroupTextMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendGroupTextMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupSvcServer).SendGroupTextMessage(m, &groupSvcSendGroupTextMessageServer{stream})
}

type GroupSvc_SendGroupTextMessageServer interface {
	Send(*SendGroupMessageReply) error
	grpc.ServerStream
}

type groupSvcSendGroupTextMessageServer struct {
	grpc.ServerStream
}

func (x *groupSvcSendGroupTextMessageServer) Send(m *SendGroupMessageReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GroupSvc_SendGroupImageMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendGroupImageMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupSvcServer).SendGroupImageMessage(m, &groupSvcSendGroupImageMessageServer{stream})
}

type GroupSvc_SendGroupImageMessageServer interface {
	Send(*SendGroupMessageReply) error
	grpc.ServerStream
}

type groupSvcSendGroupImageMessageServer struct {
	grpc.ServerStream
}

func (x *groupSvcSendGroupImageMessageServer) Send(m *SendGroupMessageReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GroupSvc_SendGroupVoiceMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendGroupVoiceMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupSvcServer).SendGroupVoiceMessage(m, &groupSvcSendGroupVoiceMessageServer{stream})
}

type GroupSvc_SendGroupVoiceMessageServer interface {
	Send(*SendGroupMessageReply) error
	grpc.ServerStream
}

type groupSvcSendGroupVoiceMessageServer struct {
	grpc.ServerStream
}

func (x *groupSvcSendGroupVoiceMessageServer) Send(m *SendGroupMessageReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GroupSvc_SendGroupAudioMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendGroupAudioMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupSvcServer).SendGroupAudioMessage(m, &groupSvcSendGroupAudioMessageServer{stream})
}

type GroupSvc_SendGroupAudioMessageServer interface {
	Send(*SendGroupMessageReply) error
	grpc.ServerStream
}

type groupSvcSendGroupAudioMessageServer struct {
	grpc.ServerStream
}

func (x *groupSvcSendGroupAudioMessageServer) Send(m *SendGroupMessageReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GroupSvc_SendGroupVideoMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendGroupVideoMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupSvcServer).SendGroupVideoMessage(m, &groupSvcSendGroupVideoMessageServer{stream})
}

type GroupSvc_SendGroupVideoMessageServer interface {
	Send(*SendGroupMessageReply) error
	grpc.ServerStream
}

type groupSvcSendGroupVideoMessageServer struct {
	grpc.ServerStream
}

func (x *groupSvcSendGroupVideoMessageServer) Send(m *SendGroupMessageReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GroupSvc_SendGroupFileMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendGroupFileMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupSvcServer).SendGroupFileMessage(m, &groupSvcSendGroupFileMessageServer{stream})
}

type GroupSvc_SendGroupFileMessageServer interface {
	Send(*SendGroupMessageReply) error
	grpc.ServerStream
}

type groupSvcSendGroupFileMessageServer struct {
	grpc.ServerStream
}

func (x *groupSvcSendGroupFileMessageServer) Send(m *SendGroupMessageReply) error {
	return x.ServerStream.SendMsg(m)
}

// GroupSvc_ServiceDesc is the grpc.ServiceDesc for GroupSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.GroupSvc",
	HandlerType: (*GroupSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupSvc_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _GroupSvc_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupDetail",
			Handler:    _GroupSvc_GetGroupDetail_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _GroupSvc_GetGroups_Handler,
		},
		{
			MethodName: "SetGroupName",
			Handler:    _GroupSvc_SetGroupName_Handler,
		},
		{
			MethodName: "SetGroupAvatar",
			Handler:    _GroupSvc_SetGroupAvatar_Handler,
		},
		{
			MethodName: "SetGroupNotice",
			Handler:    _GroupSvc_SetGroupNotice_Handler,
		},
		{
			MethodName: "SetGroupAutoJoin",
			Handler:    _GroupSvc_SetGroupAutoJoin_Handler,
		},
		{
			MethodName: "SetGroupDepositAddress",
			Handler:    _GroupSvc_SetGroupDepositAddress_Handler,
		},
		{
			MethodName: "ExitGroup",
			Handler:    _GroupSvc_ExitGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupSvc_DeleteGroup_Handler,
		},
		{
			MethodName: "DisbandGroup",
			Handler:    _GroupSvc_DisbandGroup_Handler,
		},
		{
			MethodName: "GetGroupMembers",
			Handler:    _GroupSvc_GetGroupMembers_Handler,
		},
		{
			MethodName: "RemoveGroupMember",
			Handler:    _GroupSvc_RemoveGroupMember_Handler,
		},
		{
			MethodName: "GetGroupMessage",
			Handler:    _GroupSvc_GetGroupMessage_Handler,
		},
		{
			MethodName: "GetGroupMessages",
			Handler:    _GroupSvc_GetGroupMessages_Handler,
		},
		{
			MethodName: "ClearGroupMessage",
			Handler:    _GroupSvc_ClearGroupMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendGroupTextMessage",
			Handler:       _GroupSvc_SendGroupTextMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendGroupImageMessage",
			Handler:       _GroupSvc_SendGroupImageMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendGroupVoiceMessage",
			Handler:       _GroupSvc_SendGroupVoiceMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendGroupAudioMessage",
			Handler:       _GroupSvc_SendGroupAudioMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendGroupVideoMessage",
			Handler:       _GroupSvc_SendGroupVideoMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendGroupFileMessage",
			Handler:       _GroupSvc_SendGroupFileMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	SessionSvc_GetSessions_FullMethodName = "/chat.SessionSvc/GetSessions"
)

// SessionSvcClient is the client API for SessionSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionSvcClient interface {
	GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsReply, error)
}

type sessionSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionSvcClient(cc grpc.ClientConnInterface) SessionSvcClient {
	return &sessionSvcClient{cc}
}

func (c *sessionSvcClient) GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsReply, error) {
	out := new(GetSessionsReply)
	err := c.cc.Invoke(ctx, SessionSvc_GetSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionSvcServer is the server API for SessionSvc service.
// All implementations must embed UnimplementedSessionSvcServer
// for forward compatibility
type SessionSvcServer interface {
	GetSessions(context.Context, *GetSessionsRequest) (*GetSessionsReply, error)
	mustEmbedUnimplementedSessionSvcServer()
}

// UnimplementedSessionSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSessionSvcServer struct {
}

func (UnimplementedSessionSvcServer) GetSessions(context.Context, *GetSessionsRequest) (*GetSessionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedSessionSvcServer) mustEmbedUnimplementedSessionSvcServer() {}

// UnsafeSessionSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionSvcServer will
// result in compilation errors.
type UnsafeSessionSvcServer interface {
	mustEmbedUnimplementedSessionSvcServer()
}

func RegisterSessionSvcServer(s grpc.ServiceRegistrar, srv SessionSvcServer) {
	s.RegisterService(&SessionSvc_ServiceDesc, srv)
}

func _SessionSvc_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSvcServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionSvc_GetSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSvcServer).GetSessions(ctx, req.(*GetSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionSvc_ServiceDesc is the grpc.ServiceDesc for SessionSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.SessionSvc",
	HandlerType: (*SessionSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSessions",
			Handler:    _SessionSvc_GetSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	SystemSvc_GetSystemMessages_FullMethodName   = "/chat.SystemSvc/GetSystemMessages"
	SystemSvc_AgreeAddContact_FullMethodName     = "/chat.SystemSvc/AgreeAddContact"
	SystemSvc_RejectAddContact_FullMethodName    = "/chat.SystemSvc/RejectAddContact"
	SystemSvc_AgreeJoinGroup_FullMethodName      = "/chat.SystemSvc/AgreeJoinGroup"
	SystemSvc_RejectJoinGroup_FullMethodName     = "/chat.SystemSvc/RejectJoinGroup"
	SystemSvc_DeleteSystemMessage_FullMethodName = "/chat.SystemSvc/DeleteSystemMessage"
)

// SystemSvcClient is the client API for SystemSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemSvcClient interface {
	GetSystemMessages(ctx context.Context, in *GetSystemMessagesRequest, opts ...grpc.CallOption) (*GetSystemMessagesReply, error)
	AgreeAddContact(ctx context.Context, in *AgreeAddContactRequest, opts ...grpc.CallOption) (*AgreeAddContactReply, error)
	RejectAddContact(ctx context.Context, in *RejectAddContactRequest, opts ...grpc.CallOption) (*RejectAddContactReply, error)
	AgreeJoinGroup(ctx context.Context, in *AgreeJoinGroupRequest, opts ...grpc.CallOption) (*AgreeJoinGroupReply, error)
	RejectJoinGroup(ctx context.Context, in *RejectJoinGroupRequest, opts ...grpc.CallOption) (*RejectJoinGroupReply, error)
	DeleteSystemMessage(ctx context.Context, in *DeleteSystemMessageRequest, opts ...grpc.CallOption) (*DeleteSystemMessageReply, error)
}

type systemSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemSvcClient(cc grpc.ClientConnInterface) SystemSvcClient {
	return &systemSvcClient{cc}
}

func (c *systemSvcClient) GetSystemMessages(ctx context.Context, in *GetSystemMessagesRequest, opts ...grpc.CallOption) (*GetSystemMessagesReply, error) {
	out := new(GetSystemMessagesReply)
	err := c.cc.Invoke(ctx, SystemSvc_GetSystemMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) AgreeAddContact(ctx context.Context, in *AgreeAddContactRequest, opts ...grpc.CallOption) (*AgreeAddContactReply, error) {
	out := new(AgreeAddContactReply)
	err := c.cc.Invoke(ctx, SystemSvc_AgreeAddContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) RejectAddContact(ctx context.Context, in *RejectAddContactRequest, opts ...grpc.CallOption) (*RejectAddContactReply, error) {
	out := new(RejectAddContactReply)
	err := c.cc.Invoke(ctx, SystemSvc_RejectAddContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) AgreeJoinGroup(ctx context.Context, in *AgreeJoinGroupRequest, opts ...grpc.CallOption) (*AgreeJoinGroupReply, error) {
	out := new(AgreeJoinGroupReply)
	err := c.cc.Invoke(ctx, SystemSvc_AgreeJoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) RejectJoinGroup(ctx context.Context, in *RejectJoinGroupRequest, opts ...grpc.CallOption) (*RejectJoinGroupReply, error) {
	out := new(RejectJoinGroupReply)
	err := c.cc.Invoke(ctx, SystemSvc_RejectJoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) DeleteSystemMessage(ctx context.Context, in *DeleteSystemMessageRequest, opts ...grpc.CallOption) (*DeleteSystemMessageReply, error) {
	out := new(DeleteSystemMessageReply)
	err := c.cc.Invoke(ctx, SystemSvc_DeleteSystemMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemSvcServer is the server API for SystemSvc service.
// All implementations must embed UnimplementedSystemSvcServer
// for forward compatibility
type SystemSvcServer interface {
	GetSystemMessages(context.Context, *GetSystemMessagesRequest) (*GetSystemMessagesReply, error)
	AgreeAddContact(context.Context, *AgreeAddContactRequest) (*AgreeAddContactReply, error)
	RejectAddContact(context.Context, *RejectAddContactRequest) (*RejectAddContactReply, error)
	AgreeJoinGroup(context.Context, *AgreeJoinGroupRequest) (*AgreeJoinGroupReply, error)
	RejectJoinGroup(context.Context, *RejectJoinGroupRequest) (*RejectJoinGroupReply, error)
	DeleteSystemMessage(context.Context, *DeleteSystemMessageRequest) (*DeleteSystemMessageReply, error)
	mustEmbedUnimplementedSystemSvcServer()
}

// UnimplementedSystemSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSystemSvcServer struct {
}

func (UnimplementedSystemSvcServer) GetSystemMessages(context.Context, *GetSystemMessagesRequest) (*GetSystemMessagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemMessages not implemented")
}
func (UnimplementedSystemSvcServer) AgreeAddContact(context.Context, *AgreeAddContactRequest) (*AgreeAddContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeAddContact not implemented")
}
func (UnimplementedSystemSvcServer) RejectAddContact(context.Context, *RejectAddContactRequest) (*RejectAddContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectAddContact not implemented")
}
func (UnimplementedSystemSvcServer) AgreeJoinGroup(context.Context, *AgreeJoinGroupRequest) (*AgreeJoinGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeJoinGroup not implemented")
}
func (UnimplementedSystemSvcServer) RejectJoinGroup(context.Context, *RejectJoinGroupRequest) (*RejectJoinGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectJoinGroup not implemented")
}
func (UnimplementedSystemSvcServer) DeleteSystemMessage(context.Context, *DeleteSystemMessageRequest) (*DeleteSystemMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSystemMessage not implemented")
}
func (UnimplementedSystemSvcServer) mustEmbedUnimplementedSystemSvcServer() {}

// UnsafeSystemSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemSvcServer will
// result in compilation errors.
type UnsafeSystemSvcServer interface {
	mustEmbedUnimplementedSystemSvcServer()
}

func RegisterSystemSvcServer(s grpc.ServiceRegistrar, srv SystemSvcServer) {
	s.RegisterService(&SystemSvc_ServiceDesc, srv)
}

func _SystemSvc_GetSystemMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).GetSystemMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemSvc_GetSystemMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).GetSystemMessages(ctx, req.(*GetSystemMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_AgreeAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreeAddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).AgreeAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemSvc_AgreeAddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).AgreeAddContact(ctx, req.(*AgreeAddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_RejectAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectAddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).RejectAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemSvc_RejectAddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).RejectAddContact(ctx, req.(*RejectAddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_AgreeJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreeJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).AgreeJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemSvc_AgreeJoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).AgreeJoinGroup(ctx, req.(*AgreeJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_RejectJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).RejectJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemSvc_RejectJoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).RejectJoinGroup(ctx, req.(*RejectJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_DeleteSystemMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSystemMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).DeleteSystemMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemSvc_DeleteSystemMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).DeleteSystemMessage(ctx, req.(*DeleteSystemMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemSvc_ServiceDesc is the grpc.ServiceDesc for SystemSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.SystemSvc",
	HandlerType: (*SystemSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemMessages",
			Handler:    _SystemSvc_GetSystemMessages_Handler,
		},
		{
			MethodName: "AgreeAddContact",
			Handler:    _SystemSvc_AgreeAddContact_Handler,
		},
		{
			MethodName: "RejectAddContact",
			Handler:    _SystemSvc_RejectAddContact_Handler,
		},
		{
			MethodName: "AgreeJoinGroup",
			Handler:    _SystemSvc_AgreeJoinGroup_Handler,
		},
		{
			MethodName: "RejectJoinGroup",
			Handler:    _SystemSvc_RejectJoinGroup_Handler,
		},
		{
			MethodName: "DeleteSystemMessage",
			Handler:    _SystemSvc_DeleteSystemMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	ConfigSvc_GetConfig_FullMethodName               = "/chat.ConfigSvc/GetConfig"
	ConfigSvc_SetBootstraps_FullMethodName           = "/chat.ConfigSvc/SetBootstraps"
	ConfigSvc_SetPeeringPeers_FullMethodName         = "/chat.ConfigSvc/SetPeeringPeers"
	ConfigSvc_SetEnableMDNS_FullMethodName           = "/chat.ConfigSvc/SetEnableMDNS"
	ConfigSvc_SetEnableDepositService_FullMethodName = "/chat.ConfigSvc/SetEnableDepositService"
	ConfigSvc_SetDownloadDir_FullMethodName          = "/chat.ConfigSvc/SetDownloadDir"
)

// ConfigSvcClient is the client API for ConfigSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigSvcClient interface {
	// 获取系统配置
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigReply, error)
	// 设置引导节点
	SetBootstraps(ctx context.Context, in *SetBootstrapsRequest, opts ...grpc.CallOption) (*SetBootstrapsReply, error)
	// 设置连接节点（中继服务节点）
	SetPeeringPeers(ctx context.Context, in *SetPeeringPeersRequest, opts ...grpc.CallOption) (*SetPeeringPeersReply, error)
	// 设置是否启动 mdns 服务
	SetEnableMDNS(ctx context.Context, in *SetEnableMDNSRequest, opts ...grpc.CallOption) (*SetEnableMDNSReply, error)
	// 设置是否启动寄存服务
	SetEnableDepositService(ctx context.Context, in *SetEnableDepositServiceRequest, opts ...grpc.CallOption) (*SetEnableDepositServiceReply, error)
	// 设置默认下载路径
	SetDownloadDir(ctx context.Context, in *SetDownloadDirRequest, opts ...grpc.CallOption) (*SetDownloadDirReply, error)
}

type configSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigSvcClient(cc grpc.ClientConnInterface) ConfigSvcClient {
	return &configSvcClient{cc}
}

func (c *configSvcClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigReply, error) {
	out := new(GetConfigReply)
	err := c.cc.Invoke(ctx, ConfigSvc_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSvcClient) SetBootstraps(ctx context.Context, in *SetBootstrapsRequest, opts ...grpc.CallOption) (*SetBootstrapsReply, error) {
	out := new(SetBootstrapsReply)
	err := c.cc.Invoke(ctx, ConfigSvc_SetBootstraps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSvcClient) SetPeeringPeers(ctx context.Context, in *SetPeeringPeersRequest, opts ...grpc.CallOption) (*SetPeeringPeersReply, error) {
	out := new(SetPeeringPeersReply)
	err := c.cc.Invoke(ctx, ConfigSvc_SetPeeringPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSvcClient) SetEnableMDNS(ctx context.Context, in *SetEnableMDNSRequest, opts ...grpc.CallOption) (*SetEnableMDNSReply, error) {
	out := new(SetEnableMDNSReply)
	err := c.cc.Invoke(ctx, ConfigSvc_SetEnableMDNS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSvcClient) SetEnableDepositService(ctx context.Context, in *SetEnableDepositServiceRequest, opts ...grpc.CallOption) (*SetEnableDepositServiceReply, error) {
	out := new(SetEnableDepositServiceReply)
	err := c.cc.Invoke(ctx, ConfigSvc_SetEnableDepositService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSvcClient) SetDownloadDir(ctx context.Context, in *SetDownloadDirRequest, opts ...grpc.CallOption) (*SetDownloadDirReply, error) {
	out := new(SetDownloadDirReply)
	err := c.cc.Invoke(ctx, ConfigSvc_SetDownloadDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigSvcServer is the server API for ConfigSvc service.
// All implementations must embed UnimplementedConfigSvcServer
// for forward compatibility
type ConfigSvcServer interface {
	// 获取系统配置
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigReply, error)
	// 设置引导节点
	SetBootstraps(context.Context, *SetBootstrapsRequest) (*SetBootstrapsReply, error)
	// 设置连接节点（中继服务节点）
	SetPeeringPeers(context.Context, *SetPeeringPeersRequest) (*SetPeeringPeersReply, error)
	// 设置是否启动 mdns 服务
	SetEnableMDNS(context.Context, *SetEnableMDNSRequest) (*SetEnableMDNSReply, error)
	// 设置是否启动寄存服务
	SetEnableDepositService(context.Context, *SetEnableDepositServiceRequest) (*SetEnableDepositServiceReply, error)
	// 设置默认下载路径
	SetDownloadDir(context.Context, *SetDownloadDirRequest) (*SetDownloadDirReply, error)
	mustEmbedUnimplementedConfigSvcServer()
}

// UnimplementedConfigSvcServer must be embedded to have forward compatible implementations.
type UnimplementedConfigSvcServer struct {
}

func (UnimplementedConfigSvcServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedConfigSvcServer) SetBootstraps(context.Context, *SetBootstrapsRequest) (*SetBootstrapsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBootstraps not implemented")
}
func (UnimplementedConfigSvcServer) SetPeeringPeers(context.Context, *SetPeeringPeersRequest) (*SetPeeringPeersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPeeringPeers not implemented")
}
func (UnimplementedConfigSvcServer) SetEnableMDNS(context.Context, *SetEnableMDNSRequest) (*SetEnableMDNSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnableMDNS not implemented")
}
func (UnimplementedConfigSvcServer) SetEnableDepositService(context.Context, *SetEnableDepositServiceRequest) (*SetEnableDepositServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnableDepositService not implemented")
}
func (UnimplementedConfigSvcServer) SetDownloadDir(context.Context, *SetDownloadDirRequest) (*SetDownloadDirReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDownloadDir not implemented")
}
func (UnimplementedConfigSvcServer) mustEmbedUnimplementedConfigSvcServer() {}

// UnsafeConfigSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigSvcServer will
// result in compilation errors.
type UnsafeConfigSvcServer interface {
	mustEmbedUnimplementedConfigSvcServer()
}

func RegisterConfigSvcServer(s grpc.ServiceRegistrar, srv ConfigSvcServer) {
	s.RegisterService(&ConfigSvc_ServiceDesc, srv)
}

func _ConfigSvc_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSvcServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigSvc_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSvcServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSvc_SetBootstraps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBootstrapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSvcServer).SetBootstraps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigSvc_SetBootstraps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSvcServer).SetBootstraps(ctx, req.(*SetBootstrapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSvc_SetPeeringPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPeeringPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSvcServer).SetPeeringPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigSvc_SetPeeringPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSvcServer).SetPeeringPeers(ctx, req.(*SetPeeringPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSvc_SetEnableMDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnableMDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSvcServer).SetEnableMDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigSvc_SetEnableMDNS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSvcServer).SetEnableMDNS(ctx, req.(*SetEnableMDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSvc_SetEnableDepositService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnableDepositServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSvcServer).SetEnableDepositService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigSvc_SetEnableDepositService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSvcServer).SetEnableDepositService(ctx, req.(*SetEnableDepositServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSvc_SetDownloadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDownloadDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSvcServer).SetDownloadDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigSvc_SetDownloadDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSvcServer).SetDownloadDir(ctx, req.(*SetDownloadDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigSvc_ServiceDesc is the grpc.ServiceDesc for ConfigSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ConfigSvc",
	HandlerType: (*ConfigSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _ConfigSvc_GetConfig_Handler,
		},
		{
			MethodName: "SetBootstraps",
			Handler:    _ConfigSvc_SetBootstraps_Handler,
		},
		{
			MethodName: "SetPeeringPeers",
			Handler:    _ConfigSvc_SetPeeringPeers_Handler,
		},
		{
			MethodName: "SetEnableMDNS",
			Handler:    _ConfigSvc_SetEnableMDNS_Handler,
		},
		{
			MethodName: "SetEnableDepositService",
			Handler:    _ConfigSvc_SetEnableDepositService_Handler,
		},
		{
			MethodName: "SetDownloadDir",
			Handler:    _ConfigSvc_SetDownloadDir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	FileSvc_DownloadSessionFile_FullMethodName = "/chat.FileSvc/DownloadSessionFile"
	FileSvc_GetSessionFiles_FullMethodName     = "/chat.FileSvc/GetSessionFiles"
	FileSvc_DeleteSessionFile_FullMethodName   = "/chat.FileSvc/DeleteSessionFile"
)

// FileSvcClient is the client API for FileSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSvcClient interface {
	// 下载会话文件文件
	DownloadSessionFile(ctx context.Context, in *DownloadSessionFileRequest, opts ...grpc.CallOption) (*DownloadSessionFileReply, error)
	// 获取会话文件
	GetSessionFiles(ctx context.Context, in *GetSessionFilesRequest, opts ...grpc.CallOption) (*GetSessionFilesReply, error)
	// 删除会话文件
	DeleteSessionFile(ctx context.Context, in *DeleteSessionFileRequest, opts ...grpc.CallOption) (*DeleteSessionFileReply, error)
}

type fileSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSvcClient(cc grpc.ClientConnInterface) FileSvcClient {
	return &fileSvcClient{cc}
}

func (c *fileSvcClient) DownloadSessionFile(ctx context.Context, in *DownloadSessionFileRequest, opts ...grpc.CallOption) (*DownloadSessionFileReply, error) {
	out := new(DownloadSessionFileReply)
	err := c.cc.Invoke(ctx, FileSvc_DownloadSessionFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSvcClient) GetSessionFiles(ctx context.Context, in *GetSessionFilesRequest, opts ...grpc.CallOption) (*GetSessionFilesReply, error) {
	out := new(GetSessionFilesReply)
	err := c.cc.Invoke(ctx, FileSvc_GetSessionFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSvcClient) DeleteSessionFile(ctx context.Context, in *DeleteSessionFileRequest, opts ...grpc.CallOption) (*DeleteSessionFileReply, error) {
	out := new(DeleteSessionFileReply)
	err := c.cc.Invoke(ctx, FileSvc_DeleteSessionFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSvcServer is the server API for FileSvc service.
// All implementations must embed UnimplementedFileSvcServer
// for forward compatibility
type FileSvcServer interface {
	// 下载会话文件文件
	DownloadSessionFile(context.Context, *DownloadSessionFileRequest) (*DownloadSessionFileReply, error)
	// 获取会话文件
	GetSessionFiles(context.Context, *GetSessionFilesRequest) (*GetSessionFilesReply, error)
	// 删除会话文件
	DeleteSessionFile(context.Context, *DeleteSessionFileRequest) (*DeleteSessionFileReply, error)
	mustEmbedUnimplementedFileSvcServer()
}

// UnimplementedFileSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFileSvcServer struct {
}

func (UnimplementedFileSvcServer) DownloadSessionFile(context.Context, *DownloadSessionFileRequest) (*DownloadSessionFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadSessionFile not implemented")
}
func (UnimplementedFileSvcServer) GetSessionFiles(context.Context, *GetSessionFilesRequest) (*GetSessionFilesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionFiles not implemented")
}
func (UnimplementedFileSvcServer) DeleteSessionFile(context.Context, *DeleteSessionFileRequest) (*DeleteSessionFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSessionFile not implemented")
}
func (UnimplementedFileSvcServer) mustEmbedUnimplementedFileSvcServer() {}

// UnsafeFileSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSvcServer will
// result in compilation errors.
type UnsafeFileSvcServer interface {
	mustEmbedUnimplementedFileSvcServer()
}

func RegisterFileSvcServer(s grpc.ServiceRegistrar, srv FileSvcServer) {
	s.RegisterService(&FileSvc_ServiceDesc, srv)
}

func _FileSvc_DownloadSessionFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadSessionFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSvcServer).DownloadSessionFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSvc_DownloadSessionFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSvcServer).DownloadSessionFile(ctx, req.(*DownloadSessionFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSvc_GetSessionFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSvcServer).GetSessionFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSvc_GetSessionFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSvcServer).GetSessionFiles(ctx, req.(*GetSessionFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSvc_DeleteSessionFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSvcServer).DeleteSessionFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileSvc_DeleteSessionFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSvcServer).DeleteSessionFile(ctx, req.(*DeleteSessionFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSvc_ServiceDesc is the grpc.ServiceDesc for FileSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.FileSvc",
	HandlerType: (*FileSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadSessionFile",
			Handler:    _FileSvc_DownloadSessionFile_Handler,
		},
		{
			MethodName: "GetSessionFiles",
			Handler:    _FileSvc_GetSessionFiles_Handler,
		},
		{
			MethodName: "DeleteSessionFile",
			Handler:    _FileSvc_DeleteSessionFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	SubscribeSvc_SubscribeCommonEvent_FullMethodName = "/chat.SubscribeSvc/SubscribeCommonEvent"
)

// SubscribeSvcClient is the client API for SubscribeSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscribeSvcClient interface {
	SubscribeCommonEvent(ctx context.Context, in *SubscribeCommonEventRequest, opts ...grpc.CallOption) (SubscribeSvc_SubscribeCommonEventClient, error)
}

type subscribeSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscribeSvcClient(cc grpc.ClientConnInterface) SubscribeSvcClient {
	return &subscribeSvcClient{cc}
}

func (c *subscribeSvcClient) SubscribeCommonEvent(ctx context.Context, in *SubscribeCommonEventRequest, opts ...grpc.CallOption) (SubscribeSvc_SubscribeCommonEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscribeSvc_ServiceDesc.Streams[0], SubscribeSvc_SubscribeCommonEvent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &subscribeSvcSubscribeCommonEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscribeSvc_SubscribeCommonEventClient interface {
	Recv() (*SubscribeCommonEventReply, error)
	grpc.ClientStream
}

type subscribeSvcSubscribeCommonEventClient struct {
	grpc.ClientStream
}

func (x *subscribeSvcSubscribeCommonEventClient) Recv() (*SubscribeCommonEventReply, error) {
	m := new(SubscribeCommonEventReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubscribeSvcServer is the server API for SubscribeSvc service.
// All implementations must embed UnimplementedSubscribeSvcServer
// for forward compatibility
type SubscribeSvcServer interface {
	SubscribeCommonEvent(*SubscribeCommonEventRequest, SubscribeSvc_SubscribeCommonEventServer) error
	mustEmbedUnimplementedSubscribeSvcServer()
}

// UnimplementedSubscribeSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSubscribeSvcServer struct {
}

func (UnimplementedSubscribeSvcServer) SubscribeCommonEvent(*SubscribeCommonEventRequest, SubscribeSvc_SubscribeCommonEventServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCommonEvent not implemented")
}
func (UnimplementedSubscribeSvcServer) mustEmbedUnimplementedSubscribeSvcServer() {}

// UnsafeSubscribeSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscribeSvcServer will
// result in compilation errors.
type UnsafeSubscribeSvcServer interface {
	mustEmbedUnimplementedSubscribeSvcServer()
}

func RegisterSubscribeSvcServer(s grpc.ServiceRegistrar, srv SubscribeSvcServer) {
	s.RegisterService(&SubscribeSvc_ServiceDesc, srv)
}

func _SubscribeSvc_SubscribeCommonEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCommonEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscribeSvcServer).SubscribeCommonEvent(m, &subscribeSvcSubscribeCommonEventServer{stream})
}

type SubscribeSvc_SubscribeCommonEventServer interface {
	Send(*SubscribeCommonEventReply) error
	grpc.ServerStream
}

type subscribeSvcSubscribeCommonEventServer struct {
	grpc.ServerStream
}

func (x *subscribeSvcSubscribeCommonEventServer) Send(m *SubscribeCommonEventReply) error {
	return x.ServerStream.SendMsg(m)
}

// SubscribeSvc_ServiceDesc is the grpc.ServiceDesc for SubscribeSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscribeSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.SubscribeSvc",
	HandlerType: (*SubscribeSvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeCommonEvent",
			Handler:       _SubscribeSvc_SubscribeCommonEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bind/grpc/proto/chat.proto",
}
