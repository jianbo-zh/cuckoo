// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: bind/grpc/proto/chat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountSvc_CreateAccount_FullMethodName     = "/chat.AccountSvc/CreateAccount"
	AccountSvc_GetAccount_FullMethodName        = "/chat.AccountSvc/GetAccount"
	AccountSvc_SetAccountName_FullMethodName    = "/chat.AccountSvc/SetAccountName"
	AccountSvc_SetAccountAvatar_FullMethodName  = "/chat.AccountSvc/SetAccountAvatar"
	AccountSvc_SetAutoAddContact_FullMethodName = "/chat.AccountSvc/SetAutoAddContact"
	AccountSvc_SetAutoJoinGroup_FullMethodName  = "/chat.AccountSvc/SetAutoJoinGroup"
)

// AccountSvcClient is the client API for AccountSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountSvcClient interface {
	// 创建账号
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountReply, error)
	// 账号信息
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error)
	// 更新名称
	SetAccountName(ctx context.Context, in *SetAccountNameRequest, opts ...grpc.CallOption) (*SetAccountNameReply, error)
	// 更新头像
	SetAccountAvatar(ctx context.Context, in *SetAccountAvatarRequest, opts ...grpc.CallOption) (*SetAccountAvatarReply, error)
	// 设置加人是否审核
	SetAutoAddContact(ctx context.Context, in *SetAutoAddContactRequest, opts ...grpc.CallOption) (*SetAutoAddContactReply, error)
	// 设置入群是否审核
	SetAutoJoinGroup(ctx context.Context, in *SetAutoJoinGroupRequest, opts ...grpc.CallOption) (*SetAutoJoinGroupReply, error)
}

type accountSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountSvcClient(cc grpc.ClientConnInterface) AccountSvcClient {
	return &accountSvcClient{cc}
}

func (c *accountSvcClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountReply, error) {
	out := new(CreateAccountReply)
	err := c.cc.Invoke(ctx, AccountSvc_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error) {
	out := new(GetAccountReply)
	err := c.cc.Invoke(ctx, AccountSvc_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAccountName(ctx context.Context, in *SetAccountNameRequest, opts ...grpc.CallOption) (*SetAccountNameReply, error) {
	out := new(SetAccountNameReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAccountName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAccountAvatar(ctx context.Context, in *SetAccountAvatarRequest, opts ...grpc.CallOption) (*SetAccountAvatarReply, error) {
	out := new(SetAccountAvatarReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAccountAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAutoAddContact(ctx context.Context, in *SetAutoAddContactRequest, opts ...grpc.CallOption) (*SetAutoAddContactReply, error) {
	out := new(SetAutoAddContactReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAutoAddContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAutoJoinGroup(ctx context.Context, in *SetAutoJoinGroupRequest, opts ...grpc.CallOption) (*SetAutoJoinGroupReply, error) {
	out := new(SetAutoJoinGroupReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAutoJoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountSvcServer is the server API for AccountSvc service.
// All implementations must embed UnimplementedAccountSvcServer
// for forward compatibility
type AccountSvcServer interface {
	// 创建账号
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountReply, error)
	// 账号信息
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error)
	// 更新名称
	SetAccountName(context.Context, *SetAccountNameRequest) (*SetAccountNameReply, error)
	// 更新头像
	SetAccountAvatar(context.Context, *SetAccountAvatarRequest) (*SetAccountAvatarReply, error)
	// 设置加人是否审核
	SetAutoAddContact(context.Context, *SetAutoAddContactRequest) (*SetAutoAddContactReply, error)
	// 设置入群是否审核
	SetAutoJoinGroup(context.Context, *SetAutoJoinGroupRequest) (*SetAutoJoinGroupReply, error)
	mustEmbedUnimplementedAccountSvcServer()
}

// UnimplementedAccountSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAccountSvcServer struct {
}

func (UnimplementedAccountSvcServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountSvcServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountSvcServer) SetAccountName(context.Context, *SetAccountNameRequest) (*SetAccountNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountName not implemented")
}
func (UnimplementedAccountSvcServer) SetAccountAvatar(context.Context, *SetAccountAvatarRequest) (*SetAccountAvatarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountAvatar not implemented")
}
func (UnimplementedAccountSvcServer) SetAutoAddContact(context.Context, *SetAutoAddContactRequest) (*SetAutoAddContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAutoAddContact not implemented")
}
func (UnimplementedAccountSvcServer) SetAutoJoinGroup(context.Context, *SetAutoJoinGroupRequest) (*SetAutoJoinGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAutoJoinGroup not implemented")
}
func (UnimplementedAccountSvcServer) mustEmbedUnimplementedAccountSvcServer() {}

// UnsafeAccountSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountSvcServer will
// result in compilation errors.
type UnsafeAccountSvcServer interface {
	mustEmbedUnimplementedAccountSvcServer()
}

func RegisterAccountSvcServer(s grpc.ServiceRegistrar, srv AccountSvcServer) {
	s.RegisterService(&AccountSvc_ServiceDesc, srv)
}

func _AccountSvc_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAccountName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAccountName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAccountName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAccountName(ctx, req.(*SetAccountNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAccountAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAccountAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAccountAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAccountAvatar(ctx, req.(*SetAccountAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAutoAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAutoAddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAutoAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAutoAddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAutoAddContact(ctx, req.(*SetAutoAddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAutoJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAutoJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAutoJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAutoJoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAutoJoinGroup(ctx, req.(*SetAutoJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountSvc_ServiceDesc is the grpc.ServiceDesc for AccountSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.AccountSvc",
	HandlerType: (*AccountSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _AccountSvc_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountSvc_GetAccount_Handler,
		},
		{
			MethodName: "SetAccountName",
			Handler:    _AccountSvc_SetAccountName_Handler,
		},
		{
			MethodName: "SetAccountAvatar",
			Handler:    _AccountSvc_SetAccountAvatar_Handler,
		},
		{
			MethodName: "SetAutoAddContact",
			Handler:    _AccountSvc_SetAutoAddContact_Handler,
		},
		{
			MethodName: "SetAutoJoinGroup",
			Handler:    _AccountSvc_SetAutoJoinGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	ContactSvc_GetContact_FullMethodName           = "/chat.ContactSvc/GetContact"
	ContactSvc_GetContactIds_FullMethodName        = "/chat.ContactSvc/GetContactIds"
	ContactSvc_GetContacts_FullMethodName          = "/chat.ContactSvc/GetContacts"
	ContactSvc_GetSpecifiedContacts_FullMethodName = "/chat.ContactSvc/GetSpecifiedContacts"
	ContactSvc_GetNearbyContacts_FullMethodName    = "/chat.ContactSvc/GetNearbyContacts"
	ContactSvc_GetContactMessage_FullMethodName    = "/chat.ContactSvc/GetContactMessage"
	ContactSvc_GetContactMessages_FullMethodName   = "/chat.ContactSvc/GetContactMessages"
	ContactSvc_SendContactMessage_FullMethodName   = "/chat.ContactSvc/SendContactMessage"
	ContactSvc_SetContactName_FullMethodName       = "/chat.ContactSvc/SetContactName"
	ContactSvc_ClearContactMessage_FullMethodName  = "/chat.ContactSvc/ClearContactMessage"
	ContactSvc_DeleteContact_FullMethodName        = "/chat.ContactSvc/DeleteContact"
)

// ContactSvcClient is the client API for ContactSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactSvcClient interface {
	// 联系人信息
	GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactReply, error)
	// 获取联系人ids
	GetContactIds(ctx context.Context, in *GetContactIdsRequest, opts ...grpc.CallOption) (*GetContactIdsReply, error)
	// 获取联系人列表
	GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsReply, error)
	// 获取指定联系人列表
	GetSpecifiedContacts(ctx context.Context, in *GetSpecifiedContactsRequest, opts ...grpc.CallOption) (*GetSpecifiedContactsReply, error)
	// 获取附近的人
	GetNearbyContacts(ctx context.Context, in *GetNearbyContactsRequest, opts ...grpc.CallOption) (ContactSvc_GetNearbyContactsClient, error)
	// 获取单条消息
	GetContactMessage(ctx context.Context, in *GetContactMessageRequest, opts ...grpc.CallOption) (*GetContactMessageReply, error)
	// 获取聊天记录
	GetContactMessages(ctx context.Context, in *GetContactMessagesRequest, opts ...grpc.CallOption) (*GetContactMessagesReply, error)
	// 发送消息
	SendContactMessage(ctx context.Context, in *SendContactMessageRequest, opts ...grpc.CallOption) (*SendContactMessageReply, error)
	// 设置联系人别名
	SetContactName(ctx context.Context, in *SetContactNameRequest, opts ...grpc.CallOption) (*SetContactNameReply, error)
	// 清空聊天记录
	ClearContactMessage(ctx context.Context, in *ClearContactMessageRequest, opts ...grpc.CallOption) (*ClearContactMessageReply, error)
	// 删除联系人
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactReply, error)
}

type contactSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewContactSvcClient(cc grpc.ClientConnInterface) ContactSvcClient {
	return &contactSvcClient{cc}
}

func (c *contactSvcClient) GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactReply, error) {
	out := new(GetContactReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetContactIds(ctx context.Context, in *GetContactIdsRequest, opts ...grpc.CallOption) (*GetContactIdsReply, error) {
	out := new(GetContactIdsReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetContactIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsReply, error) {
	out := new(GetContactsReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetSpecifiedContacts(ctx context.Context, in *GetSpecifiedContactsRequest, opts ...grpc.CallOption) (*GetSpecifiedContactsReply, error) {
	out := new(GetSpecifiedContactsReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetSpecifiedContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetNearbyContacts(ctx context.Context, in *GetNearbyContactsRequest, opts ...grpc.CallOption) (ContactSvc_GetNearbyContactsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContactSvc_ServiceDesc.Streams[0], ContactSvc_GetNearbyContacts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contactSvcGetNearbyContactsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContactSvc_GetNearbyContactsClient interface {
	Recv() (*GetNearbyContactsStreamReply, error)
	grpc.ClientStream
}

type contactSvcGetNearbyContactsClient struct {
	grpc.ClientStream
}

func (x *contactSvcGetNearbyContactsClient) Recv() (*GetNearbyContactsStreamReply, error) {
	m := new(GetNearbyContactsStreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contactSvcClient) GetContactMessage(ctx context.Context, in *GetContactMessageRequest, opts ...grpc.CallOption) (*GetContactMessageReply, error) {
	out := new(GetContactMessageReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetContactMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetContactMessages(ctx context.Context, in *GetContactMessagesRequest, opts ...grpc.CallOption) (*GetContactMessagesReply, error) {
	out := new(GetContactMessagesReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetContactMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) SendContactMessage(ctx context.Context, in *SendContactMessageRequest, opts ...grpc.CallOption) (*SendContactMessageReply, error) {
	out := new(SendContactMessageReply)
	err := c.cc.Invoke(ctx, ContactSvc_SendContactMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) SetContactName(ctx context.Context, in *SetContactNameRequest, opts ...grpc.CallOption) (*SetContactNameReply, error) {
	out := new(SetContactNameReply)
	err := c.cc.Invoke(ctx, ContactSvc_SetContactName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) ClearContactMessage(ctx context.Context, in *ClearContactMessageRequest, opts ...grpc.CallOption) (*ClearContactMessageReply, error) {
	out := new(ClearContactMessageReply)
	err := c.cc.Invoke(ctx, ContactSvc_ClearContactMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactReply, error) {
	out := new(DeleteContactReply)
	err := c.cc.Invoke(ctx, ContactSvc_DeleteContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactSvcServer is the server API for ContactSvc service.
// All implementations must embed UnimplementedContactSvcServer
// for forward compatibility
type ContactSvcServer interface {
	// 联系人信息
	GetContact(context.Context, *GetContactRequest) (*GetContactReply, error)
	// 获取联系人ids
	GetContactIds(context.Context, *GetContactIdsRequest) (*GetContactIdsReply, error)
	// 获取联系人列表
	GetContacts(context.Context, *GetContactsRequest) (*GetContactsReply, error)
	// 获取指定联系人列表
	GetSpecifiedContacts(context.Context, *GetSpecifiedContactsRequest) (*GetSpecifiedContactsReply, error)
	// 获取附近的人
	GetNearbyContacts(*GetNearbyContactsRequest, ContactSvc_GetNearbyContactsServer) error
	// 获取单条消息
	GetContactMessage(context.Context, *GetContactMessageRequest) (*GetContactMessageReply, error)
	// 获取聊天记录
	GetContactMessages(context.Context, *GetContactMessagesRequest) (*GetContactMessagesReply, error)
	// 发送消息
	SendContactMessage(context.Context, *SendContactMessageRequest) (*SendContactMessageReply, error)
	// 设置联系人别名
	SetContactName(context.Context, *SetContactNameRequest) (*SetContactNameReply, error)
	// 清空聊天记录
	ClearContactMessage(context.Context, *ClearContactMessageRequest) (*ClearContactMessageReply, error)
	// 删除联系人
	DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactReply, error)
	mustEmbedUnimplementedContactSvcServer()
}

// UnimplementedContactSvcServer must be embedded to have forward compatible implementations.
type UnimplementedContactSvcServer struct {
}

func (UnimplementedContactSvcServer) GetContact(context.Context, *GetContactRequest) (*GetContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedContactSvcServer) GetContactIds(context.Context, *GetContactIdsRequest) (*GetContactIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactIds not implemented")
}
func (UnimplementedContactSvcServer) GetContacts(context.Context, *GetContactsRequest) (*GetContactsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (UnimplementedContactSvcServer) GetSpecifiedContacts(context.Context, *GetSpecifiedContactsRequest) (*GetSpecifiedContactsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecifiedContacts not implemented")
}
func (UnimplementedContactSvcServer) GetNearbyContacts(*GetNearbyContactsRequest, ContactSvc_GetNearbyContactsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNearbyContacts not implemented")
}
func (UnimplementedContactSvcServer) GetContactMessage(context.Context, *GetContactMessageRequest) (*GetContactMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactMessage not implemented")
}
func (UnimplementedContactSvcServer) GetContactMessages(context.Context, *GetContactMessagesRequest) (*GetContactMessagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactMessages not implemented")
}
func (UnimplementedContactSvcServer) SendContactMessage(context.Context, *SendContactMessageRequest) (*SendContactMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendContactMessage not implemented")
}
func (UnimplementedContactSvcServer) SetContactName(context.Context, *SetContactNameRequest) (*SetContactNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContactName not implemented")
}
func (UnimplementedContactSvcServer) ClearContactMessage(context.Context, *ClearContactMessageRequest) (*ClearContactMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearContactMessage not implemented")
}
func (UnimplementedContactSvcServer) DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedContactSvcServer) mustEmbedUnimplementedContactSvcServer() {}

// UnsafeContactSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactSvcServer will
// result in compilation errors.
type UnsafeContactSvcServer interface {
	mustEmbedUnimplementedContactSvcServer()
}

func RegisterContactSvcServer(s grpc.ServiceRegistrar, srv ContactSvcServer) {
	s.RegisterService(&ContactSvc_ServiceDesc, srv)
}

func _ContactSvc_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetContact(ctx, req.(*GetContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetContactIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetContactIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetContactIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetContactIds(ctx, req.(*GetContactIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetContacts(ctx, req.(*GetContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetSpecifiedContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecifiedContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetSpecifiedContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetSpecifiedContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetSpecifiedContacts(ctx, req.(*GetSpecifiedContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetNearbyContacts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetNearbyContactsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContactSvcServer).GetNearbyContacts(m, &contactSvcGetNearbyContactsServer{stream})
}

type ContactSvc_GetNearbyContactsServer interface {
	Send(*GetNearbyContactsStreamReply) error
	grpc.ServerStream
}

type contactSvcGetNearbyContactsServer struct {
	grpc.ServerStream
}

func (x *contactSvcGetNearbyContactsServer) Send(m *GetNearbyContactsStreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ContactSvc_GetContactMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetContactMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetContactMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetContactMessage(ctx, req.(*GetContactMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetContactMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetContactMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetContactMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetContactMessages(ctx, req.(*GetContactMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_SendContactMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendContactMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).SendContactMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_SendContactMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).SendContactMessage(ctx, req.(*SendContactMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_SetContactName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetContactNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).SetContactName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_SetContactName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).SetContactName(ctx, req.(*SetContactNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_ClearContactMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearContactMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).ClearContactMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_ClearContactMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).ClearContactMessage(ctx, req.(*ClearContactMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactSvc_ServiceDesc is the grpc.ServiceDesc for ContactSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ContactSvc",
	HandlerType: (*ContactSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContact",
			Handler:    _ContactSvc_GetContact_Handler,
		},
		{
			MethodName: "GetContactIds",
			Handler:    _ContactSvc_GetContactIds_Handler,
		},
		{
			MethodName: "GetContacts",
			Handler:    _ContactSvc_GetContacts_Handler,
		},
		{
			MethodName: "GetSpecifiedContacts",
			Handler:    _ContactSvc_GetSpecifiedContacts_Handler,
		},
		{
			MethodName: "GetContactMessage",
			Handler:    _ContactSvc_GetContactMessage_Handler,
		},
		{
			MethodName: "GetContactMessages",
			Handler:    _ContactSvc_GetContactMessages_Handler,
		},
		{
			MethodName: "SendContactMessage",
			Handler:    _ContactSvc_SendContactMessage_Handler,
		},
		{
			MethodName: "SetContactName",
			Handler:    _ContactSvc_SetContactName_Handler,
		},
		{
			MethodName: "ClearContactMessage",
			Handler:    _ContactSvc_ClearContactMessage_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _ContactSvc_DeleteContact_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNearbyContacts",
			Handler:       _ContactSvc_GetNearbyContacts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	GroupSvc_CreateGroup_FullMethodName        = "/chat.GroupSvc/CreateGroup"
	GroupSvc_GetGroup_FullMethodName           = "/chat.GroupSvc/GetGroup"
	GroupSvc_GetGroupFull_FullMethodName       = "/chat.GroupSvc/GetGroupFull"
	GroupSvc_GetGroups_FullMethodName          = "/chat.GroupSvc/GetGroups"
	GroupSvc_GetGroupMessages_FullMethodName   = "/chat.GroupSvc/GetGroupMessages"
	GroupSvc_SendGroupMessage_FullMethodName   = "/chat.GroupSvc/SendGroupMessage"
	GroupSvc_SetGroupAvatar_FullMethodName     = "/chat.GroupSvc/SetGroupAvatar"
	GroupSvc_SetGroupName_FullMethodName       = "/chat.GroupSvc/SetGroupName"
	GroupSvc_SetGroupNotice_FullMethodName     = "/chat.GroupSvc/SetGroupNotice"
	GroupSvc_InviteJoinGroup_FullMethodName    = "/chat.GroupSvc/InviteJoinGroup"
	GroupSvc_GetGroupMembers_FullMethodName    = "/chat.GroupSvc/GetGroupMembers"
	GroupSvc_RemoveGroupMember_FullMethodName  = "/chat.GroupSvc/RemoveGroupMember"
	GroupSvc_SetJoinGroupReview_FullMethodName = "/chat.GroupSvc/SetJoinGroupReview"
	GroupSvc_ClearGroupMessage_FullMethodName  = "/chat.GroupSvc/ClearGroupMessage"
	GroupSvc_ExitGroup_FullMethodName          = "/chat.GroupSvc/ExitGroup"
	GroupSvc_DeleteGroup_FullMethodName        = "/chat.GroupSvc/DeleteGroup"
)

// GroupSvcClient is the client API for GroupSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupSvcClient interface {
	// 创建群
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupReply, error)
	// 获取群详情
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error)
	// 获取群详情
	GetGroupFull(ctx context.Context, in *GetGroupFullRequest, opts ...grpc.CallOption) (*GetGroupFullReply, error)
	// 获取群列表
	GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsReply, error)
	// 获取聊天记录
	GetGroupMessages(ctx context.Context, in *GetGroupMessagesRequest, opts ...grpc.CallOption) (*GetGroupMessagesReply, error)
	// 发送消息
	SendGroupMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*SendGroupMessageReply, error)
	// 设置头像（管理员操作）
	SetGroupAvatar(ctx context.Context, in *SetGroupAvatarRequest, opts ...grpc.CallOption) (*SetGroupAvatarReply, error)
	// 设置名称
	SetGroupName(ctx context.Context, in *SetGroupNameRequest, opts ...grpc.CallOption) (*SetGroupNameReply, error)
	// 设置群公告
	SetGroupNotice(ctx context.Context, in *SetGroupNoticeRequest, opts ...grpc.CallOption) (*SetGroupNoticeReply, error)
	// 邀请群成员
	InviteJoinGroup(ctx context.Context, in *InviteJoinGroupRequest, opts ...grpc.CallOption) (*InviteJoinGroupReply, error)
	// 群成员列表
	GetGroupMembers(ctx context.Context, in *GetGroupMembersRequest, opts ...grpc.CallOption) (*GetGroupMembersReply, error)
	// 移除群成员
	RemoveGroupMember(ctx context.Context, in *RemoveGroupMemberRequest, opts ...grpc.CallOption) (*RemoveGroupMemberReply, error)
	// 设置入群是否审核
	SetJoinGroupReview(ctx context.Context, in *SetJoinGroupReviewRequest, opts ...grpc.CallOption) (*SetJoinGroupReviewReply, error)
	// 清空聊天记录
	ClearGroupMessage(ctx context.Context, in *ClearGroupMessageRequest, opts ...grpc.CallOption) (*ClearGroupMessageReply, error)
	// 退出此群
	ExitGroup(ctx context.Context, in *ExitGroupRequest, opts ...grpc.CallOption) (*ExitGroupReply, error)
	// 删除此群
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupReply, error)
}

type groupSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupSvcClient(cc grpc.ClientConnInterface) GroupSvcClient {
	return &groupSvcClient{cc}
}

func (c *groupSvcClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupReply, error) {
	out := new(CreateGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupReply, error) {
	out := new(GetGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroupFull(ctx context.Context, in *GetGroupFullRequest, opts ...grpc.CallOption) (*GetGroupFullReply, error) {
	out := new(GetGroupFullReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroupFull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsReply, error) {
	out := new(GetGroupsReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroupMessages(ctx context.Context, in *GetGroupMessagesRequest, opts ...grpc.CallOption) (*GetGroupMessagesReply, error) {
	out := new(GetGroupMessagesReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroupMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SendGroupMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*SendGroupMessageReply, error) {
	out := new(SendGroupMessageReply)
	err := c.cc.Invoke(ctx, GroupSvc_SendGroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SetGroupAvatar(ctx context.Context, in *SetGroupAvatarRequest, opts ...grpc.CallOption) (*SetGroupAvatarReply, error) {
	out := new(SetGroupAvatarReply)
	err := c.cc.Invoke(ctx, GroupSvc_SetGroupAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SetGroupName(ctx context.Context, in *SetGroupNameRequest, opts ...grpc.CallOption) (*SetGroupNameReply, error) {
	out := new(SetGroupNameReply)
	err := c.cc.Invoke(ctx, GroupSvc_SetGroupName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SetGroupNotice(ctx context.Context, in *SetGroupNoticeRequest, opts ...grpc.CallOption) (*SetGroupNoticeReply, error) {
	out := new(SetGroupNoticeReply)
	err := c.cc.Invoke(ctx, GroupSvc_SetGroupNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) InviteJoinGroup(ctx context.Context, in *InviteJoinGroupRequest, opts ...grpc.CallOption) (*InviteJoinGroupReply, error) {
	out := new(InviteJoinGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_InviteJoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroupMembers(ctx context.Context, in *GetGroupMembersRequest, opts ...grpc.CallOption) (*GetGroupMembersReply, error) {
	out := new(GetGroupMembersReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroupMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) RemoveGroupMember(ctx context.Context, in *RemoveGroupMemberRequest, opts ...grpc.CallOption) (*RemoveGroupMemberReply, error) {
	out := new(RemoveGroupMemberReply)
	err := c.cc.Invoke(ctx, GroupSvc_RemoveGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SetJoinGroupReview(ctx context.Context, in *SetJoinGroupReviewRequest, opts ...grpc.CallOption) (*SetJoinGroupReviewReply, error) {
	out := new(SetJoinGroupReviewReply)
	err := c.cc.Invoke(ctx, GroupSvc_SetJoinGroupReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) ClearGroupMessage(ctx context.Context, in *ClearGroupMessageRequest, opts ...grpc.CallOption) (*ClearGroupMessageReply, error) {
	out := new(ClearGroupMessageReply)
	err := c.cc.Invoke(ctx, GroupSvc_ClearGroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) ExitGroup(ctx context.Context, in *ExitGroupRequest, opts ...grpc.CallOption) (*ExitGroupReply, error) {
	out := new(ExitGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_ExitGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupReply, error) {
	out := new(DeleteGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupSvcServer is the server API for GroupSvc service.
// All implementations must embed UnimplementedGroupSvcServer
// for forward compatibility
type GroupSvcServer interface {
	// 创建群
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupReply, error)
	// 获取群详情
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error)
	// 获取群详情
	GetGroupFull(context.Context, *GetGroupFullRequest) (*GetGroupFullReply, error)
	// 获取群列表
	GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsReply, error)
	// 获取聊天记录
	GetGroupMessages(context.Context, *GetGroupMessagesRequest) (*GetGroupMessagesReply, error)
	// 发送消息
	SendGroupMessage(context.Context, *SendGroupMessageRequest) (*SendGroupMessageReply, error)
	// 设置头像（管理员操作）
	SetGroupAvatar(context.Context, *SetGroupAvatarRequest) (*SetGroupAvatarReply, error)
	// 设置名称
	SetGroupName(context.Context, *SetGroupNameRequest) (*SetGroupNameReply, error)
	// 设置群公告
	SetGroupNotice(context.Context, *SetGroupNoticeRequest) (*SetGroupNoticeReply, error)
	// 邀请群成员
	InviteJoinGroup(context.Context, *InviteJoinGroupRequest) (*InviteJoinGroupReply, error)
	// 群成员列表
	GetGroupMembers(context.Context, *GetGroupMembersRequest) (*GetGroupMembersReply, error)
	// 移除群成员
	RemoveGroupMember(context.Context, *RemoveGroupMemberRequest) (*RemoveGroupMemberReply, error)
	// 设置入群是否审核
	SetJoinGroupReview(context.Context, *SetJoinGroupReviewRequest) (*SetJoinGroupReviewReply, error)
	// 清空聊天记录
	ClearGroupMessage(context.Context, *ClearGroupMessageRequest) (*ClearGroupMessageReply, error)
	// 退出此群
	ExitGroup(context.Context, *ExitGroupRequest) (*ExitGroupReply, error)
	// 删除此群
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupReply, error)
	mustEmbedUnimplementedGroupSvcServer()
}

// UnimplementedGroupSvcServer must be embedded to have forward compatible implementations.
type UnimplementedGroupSvcServer struct {
}

func (UnimplementedGroupSvcServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupSvcServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupSvcServer) GetGroupFull(context.Context, *GetGroupFullRequest) (*GetGroupFullReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupFull not implemented")
}
func (UnimplementedGroupSvcServer) GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedGroupSvcServer) GetGroupMessages(context.Context, *GetGroupMessagesRequest) (*GetGroupMessagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMessages not implemented")
}
func (UnimplementedGroupSvcServer) SendGroupMessage(context.Context, *SendGroupMessageRequest) (*SendGroupMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMessage not implemented")
}
func (UnimplementedGroupSvcServer) SetGroupAvatar(context.Context, *SetGroupAvatarRequest) (*SetGroupAvatarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupAvatar not implemented")
}
func (UnimplementedGroupSvcServer) SetGroupName(context.Context, *SetGroupNameRequest) (*SetGroupNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupName not implemented")
}
func (UnimplementedGroupSvcServer) SetGroupNotice(context.Context, *SetGroupNoticeRequest) (*SetGroupNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupNotice not implemented")
}
func (UnimplementedGroupSvcServer) InviteJoinGroup(context.Context, *InviteJoinGroupRequest) (*InviteJoinGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteJoinGroup not implemented")
}
func (UnimplementedGroupSvcServer) GetGroupMembers(context.Context, *GetGroupMembersRequest) (*GetGroupMembersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMembers not implemented")
}
func (UnimplementedGroupSvcServer) RemoveGroupMember(context.Context, *RemoveGroupMemberRequest) (*RemoveGroupMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupMember not implemented")
}
func (UnimplementedGroupSvcServer) SetJoinGroupReview(context.Context, *SetJoinGroupReviewRequest) (*SetJoinGroupReviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJoinGroupReview not implemented")
}
func (UnimplementedGroupSvcServer) ClearGroupMessage(context.Context, *ClearGroupMessageRequest) (*ClearGroupMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearGroupMessage not implemented")
}
func (UnimplementedGroupSvcServer) ExitGroup(context.Context, *ExitGroupRequest) (*ExitGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitGroup not implemented")
}
func (UnimplementedGroupSvcServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupSvcServer) mustEmbedUnimplementedGroupSvcServer() {}

// UnsafeGroupSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupSvcServer will
// result in compilation errors.
type UnsafeGroupSvcServer interface {
	mustEmbedUnimplementedGroupSvcServer()
}

func RegisterGroupSvcServer(s grpc.ServiceRegistrar, srv GroupSvcServer) {
	s.RegisterService(&GroupSvc_ServiceDesc, srv)
}

func _GroupSvc_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroupFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroupFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroupFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroupFull(ctx, req.(*GetGroupFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroups(ctx, req.(*GetGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroupMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroupMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroupMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroupMessages(ctx, req.(*GetGroupMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SendGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SendGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SendGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SendGroupMessage(ctx, req.(*SendGroupMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SetGroupAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SetGroupAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SetGroupAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SetGroupAvatar(ctx, req.(*SetGroupAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SetGroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SetGroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SetGroupName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SetGroupName(ctx, req.(*SetGroupNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SetGroupNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SetGroupNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SetGroupNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SetGroupNotice(ctx, req.(*SetGroupNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_InviteJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).InviteJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_InviteJoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).InviteJoinGroup(ctx, req.(*InviteJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroupMembers(ctx, req.(*GetGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_RemoveGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).RemoveGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_RemoveGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).RemoveGroupMember(ctx, req.(*RemoveGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SetJoinGroupReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJoinGroupReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SetJoinGroupReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SetJoinGroupReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SetJoinGroupReview(ctx, req.(*SetJoinGroupReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_ClearGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearGroupMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).ClearGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_ClearGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).ClearGroupMessage(ctx, req.(*ClearGroupMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_ExitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).ExitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_ExitGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).ExitGroup(ctx, req.(*ExitGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupSvc_ServiceDesc is the grpc.ServiceDesc for GroupSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.GroupSvc",
	HandlerType: (*GroupSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupSvc_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _GroupSvc_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupFull",
			Handler:    _GroupSvc_GetGroupFull_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _GroupSvc_GetGroups_Handler,
		},
		{
			MethodName: "GetGroupMessages",
			Handler:    _GroupSvc_GetGroupMessages_Handler,
		},
		{
			MethodName: "SendGroupMessage",
			Handler:    _GroupSvc_SendGroupMessage_Handler,
		},
		{
			MethodName: "SetGroupAvatar",
			Handler:    _GroupSvc_SetGroupAvatar_Handler,
		},
		{
			MethodName: "SetGroupName",
			Handler:    _GroupSvc_SetGroupName_Handler,
		},
		{
			MethodName: "SetGroupNotice",
			Handler:    _GroupSvc_SetGroupNotice_Handler,
		},
		{
			MethodName: "InviteJoinGroup",
			Handler:    _GroupSvc_InviteJoinGroup_Handler,
		},
		{
			MethodName: "GetGroupMembers",
			Handler:    _GroupSvc_GetGroupMembers_Handler,
		},
		{
			MethodName: "RemoveGroupMember",
			Handler:    _GroupSvc_RemoveGroupMember_Handler,
		},
		{
			MethodName: "SetJoinGroupReview",
			Handler:    _GroupSvc_SetJoinGroupReview_Handler,
		},
		{
			MethodName: "ClearGroupMessage",
			Handler:    _GroupSvc_ClearGroupMessage_Handler,
		},
		{
			MethodName: "ExitGroup",
			Handler:    _GroupSvc_ExitGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupSvc_DeleteGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	SessionSvc_GetSessions_FullMethodName = "/chat.SessionSvc/GetSessions"
)

// SessionSvcClient is the client API for SessionSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionSvcClient interface {
	GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsReply, error)
}

type sessionSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionSvcClient(cc grpc.ClientConnInterface) SessionSvcClient {
	return &sessionSvcClient{cc}
}

func (c *sessionSvcClient) GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsReply, error) {
	out := new(GetSessionsReply)
	err := c.cc.Invoke(ctx, SessionSvc_GetSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionSvcServer is the server API for SessionSvc service.
// All implementations must embed UnimplementedSessionSvcServer
// for forward compatibility
type SessionSvcServer interface {
	GetSessions(context.Context, *GetSessionsRequest) (*GetSessionsReply, error)
	mustEmbedUnimplementedSessionSvcServer()
}

// UnimplementedSessionSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSessionSvcServer struct {
}

func (UnimplementedSessionSvcServer) GetSessions(context.Context, *GetSessionsRequest) (*GetSessionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedSessionSvcServer) mustEmbedUnimplementedSessionSvcServer() {}

// UnsafeSessionSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionSvcServer will
// result in compilation errors.
type UnsafeSessionSvcServer interface {
	mustEmbedUnimplementedSessionSvcServer()
}

func RegisterSessionSvcServer(s grpc.ServiceRegistrar, srv SessionSvcServer) {
	s.RegisterService(&SessionSvc_ServiceDesc, srv)
}

func _SessionSvc_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSvcServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionSvc_GetSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSvcServer).GetSessions(ctx, req.(*GetSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionSvc_ServiceDesc is the grpc.ServiceDesc for SessionSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.SessionSvc",
	HandlerType: (*SessionSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSessions",
			Handler:    _SessionSvc_GetSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	SystemSvc_GetSystemMessages_FullMethodName  = "/chat.SystemSvc/GetSystemMessages"
	SystemSvc_ClearSystemMessage_FullMethodName = "/chat.SystemSvc/ClearSystemMessage"
	SystemSvc_ApplyAddContact_FullMethodName    = "/chat.SystemSvc/ApplyAddContact"
	SystemSvc_AgreeAddContact_FullMethodName    = "/chat.SystemSvc/AgreeAddContact"
	SystemSvc_RejectAddContact_FullMethodName   = "/chat.SystemSvc/RejectAddContact"
)

// SystemSvcClient is the client API for SystemSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemSvcClient interface {
	GetSystemMessages(ctx context.Context, in *GetSystemMessagesRequest, opts ...grpc.CallOption) (*GetSystemMessagesReply, error)
	ClearSystemMessage(ctx context.Context, in *ClearSystemMessageRequest, opts ...grpc.CallOption) (*ClearSystemMessageReply, error)
	ApplyAddContact(ctx context.Context, in *ApplyAddContactRequest, opts ...grpc.CallOption) (*ApplyAddContactReply, error)
	AgreeAddContact(ctx context.Context, in *AgreeAddContactRequest, opts ...grpc.CallOption) (*AgreeAddContactReply, error)
	RejectAddContact(ctx context.Context, in *RejectAddContactRequest, opts ...grpc.CallOption) (*RejectAddContactReply, error)
}

type systemSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemSvcClient(cc grpc.ClientConnInterface) SystemSvcClient {
	return &systemSvcClient{cc}
}

func (c *systemSvcClient) GetSystemMessages(ctx context.Context, in *GetSystemMessagesRequest, opts ...grpc.CallOption) (*GetSystemMessagesReply, error) {
	out := new(GetSystemMessagesReply)
	err := c.cc.Invoke(ctx, SystemSvc_GetSystemMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) ClearSystemMessage(ctx context.Context, in *ClearSystemMessageRequest, opts ...grpc.CallOption) (*ClearSystemMessageReply, error) {
	out := new(ClearSystemMessageReply)
	err := c.cc.Invoke(ctx, SystemSvc_ClearSystemMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) ApplyAddContact(ctx context.Context, in *ApplyAddContactRequest, opts ...grpc.CallOption) (*ApplyAddContactReply, error) {
	out := new(ApplyAddContactReply)
	err := c.cc.Invoke(ctx, SystemSvc_ApplyAddContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) AgreeAddContact(ctx context.Context, in *AgreeAddContactRequest, opts ...grpc.CallOption) (*AgreeAddContactReply, error) {
	out := new(AgreeAddContactReply)
	err := c.cc.Invoke(ctx, SystemSvc_AgreeAddContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) RejectAddContact(ctx context.Context, in *RejectAddContactRequest, opts ...grpc.CallOption) (*RejectAddContactReply, error) {
	out := new(RejectAddContactReply)
	err := c.cc.Invoke(ctx, SystemSvc_RejectAddContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemSvcServer is the server API for SystemSvc service.
// All implementations must embed UnimplementedSystemSvcServer
// for forward compatibility
type SystemSvcServer interface {
	GetSystemMessages(context.Context, *GetSystemMessagesRequest) (*GetSystemMessagesReply, error)
	ClearSystemMessage(context.Context, *ClearSystemMessageRequest) (*ClearSystemMessageReply, error)
	ApplyAddContact(context.Context, *ApplyAddContactRequest) (*ApplyAddContactReply, error)
	AgreeAddContact(context.Context, *AgreeAddContactRequest) (*AgreeAddContactReply, error)
	RejectAddContact(context.Context, *RejectAddContactRequest) (*RejectAddContactReply, error)
	mustEmbedUnimplementedSystemSvcServer()
}

// UnimplementedSystemSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSystemSvcServer struct {
}

func (UnimplementedSystemSvcServer) GetSystemMessages(context.Context, *GetSystemMessagesRequest) (*GetSystemMessagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemMessages not implemented")
}
func (UnimplementedSystemSvcServer) ClearSystemMessage(context.Context, *ClearSystemMessageRequest) (*ClearSystemMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSystemMessage not implemented")
}
func (UnimplementedSystemSvcServer) ApplyAddContact(context.Context, *ApplyAddContactRequest) (*ApplyAddContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyAddContact not implemented")
}
func (UnimplementedSystemSvcServer) AgreeAddContact(context.Context, *AgreeAddContactRequest) (*AgreeAddContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeAddContact not implemented")
}
func (UnimplementedSystemSvcServer) RejectAddContact(context.Context, *RejectAddContactRequest) (*RejectAddContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectAddContact not implemented")
}
func (UnimplementedSystemSvcServer) mustEmbedUnimplementedSystemSvcServer() {}

// UnsafeSystemSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemSvcServer will
// result in compilation errors.
type UnsafeSystemSvcServer interface {
	mustEmbedUnimplementedSystemSvcServer()
}

func RegisterSystemSvcServer(s grpc.ServiceRegistrar, srv SystemSvcServer) {
	s.RegisterService(&SystemSvc_ServiceDesc, srv)
}

func _SystemSvc_GetSystemMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).GetSystemMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemSvc_GetSystemMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).GetSystemMessages(ctx, req.(*GetSystemMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_ClearSystemMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearSystemMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).ClearSystemMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemSvc_ClearSystemMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).ClearSystemMessage(ctx, req.(*ClearSystemMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_ApplyAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyAddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).ApplyAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemSvc_ApplyAddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).ApplyAddContact(ctx, req.(*ApplyAddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_AgreeAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgreeAddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).AgreeAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemSvc_AgreeAddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).AgreeAddContact(ctx, req.(*AgreeAddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_RejectAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectAddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).RejectAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemSvc_RejectAddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).RejectAddContact(ctx, req.(*RejectAddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemSvc_ServiceDesc is the grpc.ServiceDesc for SystemSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.SystemSvc",
	HandlerType: (*SystemSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemMessages",
			Handler:    _SystemSvc_GetSystemMessages_Handler,
		},
		{
			MethodName: "ClearSystemMessage",
			Handler:    _SystemSvc_ClearSystemMessage_Handler,
		},
		{
			MethodName: "ApplyAddContact",
			Handler:    _SystemSvc_ApplyAddContact_Handler,
		},
		{
			MethodName: "AgreeAddContact",
			Handler:    _SystemSvc_AgreeAddContact_Handler,
		},
		{
			MethodName: "RejectAddContact",
			Handler:    _SystemSvc_RejectAddContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	SubscribeSvc_SubscribeCommonEvent_FullMethodName = "/chat.SubscribeSvc/SubscribeCommonEvent"
)

// SubscribeSvcClient is the client API for SubscribeSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscribeSvcClient interface {
	SubscribeCommonEvent(ctx context.Context, in *SubscribeCommonEventRequest, opts ...grpc.CallOption) (SubscribeSvc_SubscribeCommonEventClient, error)
}

type subscribeSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscribeSvcClient(cc grpc.ClientConnInterface) SubscribeSvcClient {
	return &subscribeSvcClient{cc}
}

func (c *subscribeSvcClient) SubscribeCommonEvent(ctx context.Context, in *SubscribeCommonEventRequest, opts ...grpc.CallOption) (SubscribeSvc_SubscribeCommonEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscribeSvc_ServiceDesc.Streams[0], SubscribeSvc_SubscribeCommonEvent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &subscribeSvcSubscribeCommonEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscribeSvc_SubscribeCommonEventClient interface {
	Recv() (*SubscribeCommonEventReply, error)
	grpc.ClientStream
}

type subscribeSvcSubscribeCommonEventClient struct {
	grpc.ClientStream
}

func (x *subscribeSvcSubscribeCommonEventClient) Recv() (*SubscribeCommonEventReply, error) {
	m := new(SubscribeCommonEventReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubscribeSvcServer is the server API for SubscribeSvc service.
// All implementations must embed UnimplementedSubscribeSvcServer
// for forward compatibility
type SubscribeSvcServer interface {
	SubscribeCommonEvent(*SubscribeCommonEventRequest, SubscribeSvc_SubscribeCommonEventServer) error
	mustEmbedUnimplementedSubscribeSvcServer()
}

// UnimplementedSubscribeSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSubscribeSvcServer struct {
}

func (UnimplementedSubscribeSvcServer) SubscribeCommonEvent(*SubscribeCommonEventRequest, SubscribeSvc_SubscribeCommonEventServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCommonEvent not implemented")
}
func (UnimplementedSubscribeSvcServer) mustEmbedUnimplementedSubscribeSvcServer() {}

// UnsafeSubscribeSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscribeSvcServer will
// result in compilation errors.
type UnsafeSubscribeSvcServer interface {
	mustEmbedUnimplementedSubscribeSvcServer()
}

func RegisterSubscribeSvcServer(s grpc.ServiceRegistrar, srv SubscribeSvcServer) {
	s.RegisterService(&SubscribeSvc_ServiceDesc, srv)
}

func _SubscribeSvc_SubscribeCommonEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCommonEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscribeSvcServer).SubscribeCommonEvent(m, &subscribeSvcSubscribeCommonEventServer{stream})
}

type SubscribeSvc_SubscribeCommonEventServer interface {
	Send(*SubscribeCommonEventReply) error
	grpc.ServerStream
}

type subscribeSvcSubscribeCommonEventServer struct {
	grpc.ServerStream
}

func (x *subscribeSvcSubscribeCommonEventServer) Send(m *SubscribeCommonEventReply) error {
	return x.ServerStream.SendMsg(m)
}

// SubscribeSvc_ServiceDesc is the grpc.ServiceDesc for SubscribeSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscribeSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.SubscribeSvc",
	HandlerType: (*SubscribeSvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeCommonEvent",
			Handler:       _SubscribeSvc_SubscribeCommonEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bind/grpc/proto/chat.proto",
}
