// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: bind/grpc/proto/chat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountSvc_CreateAccount_FullMethodName           = "/chat.AccountSvc/CreateAccount"
	AccountSvc_GetAccount_FullMethodName              = "/chat.AccountSvc/GetAccount"
	AccountSvc_SetAccountAvatar_FullMethodName        = "/chat.AccountSvc/SetAccountAvatar"
	AccountSvc_SetAccountName_FullMethodName          = "/chat.AccountSvc/SetAccountName"
	AccountSvc_SetAutoReviewAddContact_FullMethodName = "/chat.AccountSvc/SetAutoReviewAddContact"
	AccountSvc_SetAutoReviewJoinGroup_FullMethodName  = "/chat.AccountSvc/SetAutoReviewJoinGroup"
)

// AccountSvcClient is the client API for AccountSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountSvcClient interface {
	// 创建账号
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountReply, error)
	// 账号信息
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error)
	// 更新头像
	SetAccountAvatar(ctx context.Context, in *SetAccountAvatarRequest, opts ...grpc.CallOption) (*SetAccountAvatarReply, error)
	// 更新名称
	SetAccountName(ctx context.Context, in *SetAccountNameRequest, opts ...grpc.CallOption) (*SetAccountNameReply, error)
	// 设置加人是否审核
	SetAutoReviewAddContact(ctx context.Context, in *SetAutoReviewAddContactRequest, opts ...grpc.CallOption) (*SetAutoReviewAddContactReply, error)
	// 设置入群是否审核
	SetAutoReviewJoinGroup(ctx context.Context, in *SetAutoReviewJoinGroupRequest, opts ...grpc.CallOption) (*SetAutoReviewJoinGroupReply, error)
}

type accountSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountSvcClient(cc grpc.ClientConnInterface) AccountSvcClient {
	return &accountSvcClient{cc}
}

func (c *accountSvcClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountReply, error) {
	out := new(CreateAccountReply)
	err := c.cc.Invoke(ctx, AccountSvc_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error) {
	out := new(GetAccountReply)
	err := c.cc.Invoke(ctx, AccountSvc_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAccountAvatar(ctx context.Context, in *SetAccountAvatarRequest, opts ...grpc.CallOption) (*SetAccountAvatarReply, error) {
	out := new(SetAccountAvatarReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAccountAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAccountName(ctx context.Context, in *SetAccountNameRequest, opts ...grpc.CallOption) (*SetAccountNameReply, error) {
	out := new(SetAccountNameReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAccountName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAutoReviewAddContact(ctx context.Context, in *SetAutoReviewAddContactRequest, opts ...grpc.CallOption) (*SetAutoReviewAddContactReply, error) {
	out := new(SetAutoReviewAddContactReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAutoReviewAddContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSvcClient) SetAutoReviewJoinGroup(ctx context.Context, in *SetAutoReviewJoinGroupRequest, opts ...grpc.CallOption) (*SetAutoReviewJoinGroupReply, error) {
	out := new(SetAutoReviewJoinGroupReply)
	err := c.cc.Invoke(ctx, AccountSvc_SetAutoReviewJoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountSvcServer is the server API for AccountSvc service.
// All implementations must embed UnimplementedAccountSvcServer
// for forward compatibility
type AccountSvcServer interface {
	// 创建账号
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountReply, error)
	// 账号信息
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error)
	// 更新头像
	SetAccountAvatar(context.Context, *SetAccountAvatarRequest) (*SetAccountAvatarReply, error)
	// 更新名称
	SetAccountName(context.Context, *SetAccountNameRequest) (*SetAccountNameReply, error)
	// 设置加人是否审核
	SetAutoReviewAddContact(context.Context, *SetAutoReviewAddContactRequest) (*SetAutoReviewAddContactReply, error)
	// 设置入群是否审核
	SetAutoReviewJoinGroup(context.Context, *SetAutoReviewJoinGroupRequest) (*SetAutoReviewJoinGroupReply, error)
	mustEmbedUnimplementedAccountSvcServer()
}

// UnimplementedAccountSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAccountSvcServer struct {
}

func (UnimplementedAccountSvcServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountSvcServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountSvcServer) SetAccountAvatar(context.Context, *SetAccountAvatarRequest) (*SetAccountAvatarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountAvatar not implemented")
}
func (UnimplementedAccountSvcServer) SetAccountName(context.Context, *SetAccountNameRequest) (*SetAccountNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountName not implemented")
}
func (UnimplementedAccountSvcServer) SetAutoReviewAddContact(context.Context, *SetAutoReviewAddContactRequest) (*SetAutoReviewAddContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAutoReviewAddContact not implemented")
}
func (UnimplementedAccountSvcServer) SetAutoReviewJoinGroup(context.Context, *SetAutoReviewJoinGroupRequest) (*SetAutoReviewJoinGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAutoReviewJoinGroup not implemented")
}
func (UnimplementedAccountSvcServer) mustEmbedUnimplementedAccountSvcServer() {}

// UnsafeAccountSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountSvcServer will
// result in compilation errors.
type UnsafeAccountSvcServer interface {
	mustEmbedUnimplementedAccountSvcServer()
}

func RegisterAccountSvcServer(s grpc.ServiceRegistrar, srv AccountSvcServer) {
	s.RegisterService(&AccountSvc_ServiceDesc, srv)
}

func _AccountSvc_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAccountAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAccountAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAccountAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAccountAvatar(ctx, req.(*SetAccountAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAccountName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAccountName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAccountName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAccountName(ctx, req.(*SetAccountNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAutoReviewAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAutoReviewAddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAutoReviewAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAutoReviewAddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAutoReviewAddContact(ctx, req.(*SetAutoReviewAddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSvc_SetAutoReviewJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAutoReviewJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSvcServer).SetAutoReviewJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountSvc_SetAutoReviewJoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSvcServer).SetAutoReviewJoinGroup(ctx, req.(*SetAutoReviewJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountSvc_ServiceDesc is the grpc.ServiceDesc for AccountSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.AccountSvc",
	HandlerType: (*AccountSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _AccountSvc_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountSvc_GetAccount_Handler,
		},
		{
			MethodName: "SetAccountAvatar",
			Handler:    _AccountSvc_SetAccountAvatar_Handler,
		},
		{
			MethodName: "SetAccountName",
			Handler:    _AccountSvc_SetAccountName_Handler,
		},
		{
			MethodName: "SetAutoReviewAddContact",
			Handler:    _AccountSvc_SetAutoReviewAddContact_Handler,
		},
		{
			MethodName: "SetAutoReviewJoinGroup",
			Handler:    _AccountSvc_SetAutoReviewJoinGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	ContactSvc_AddContact_FullMethodName              = "/chat.ContactSvc/AddContact"
	ContactSvc_GetContactList_FullMethodName          = "/chat.ContactSvc/GetContactList"
	ContactSvc_GetSpecifiedContactList_FullMethodName = "/chat.ContactSvc/GetSpecifiedContactList"
	ContactSvc_GetNearbyContactList_FullMethodName    = "/chat.ContactSvc/GetNearbyContactList"
	ContactSvc_GetContact_FullMethodName              = "/chat.ContactSvc/GetContact"
	ContactSvc_GetContactMessageList_FullMethodName   = "/chat.ContactSvc/GetContactMessageList"
	ContactSvc_SendContactMessage_FullMethodName      = "/chat.ContactSvc/SendContactMessage"
	ContactSvc_SetContactAlias_FullMethodName         = "/chat.ContactSvc/SetContactAlias"
	ContactSvc_ClearContactMessage_FullMethodName     = "/chat.ContactSvc/ClearContactMessage"
	ContactSvc_DeleteContact_FullMethodName           = "/chat.ContactSvc/DeleteContact"
)

// ContactSvcClient is the client API for ContactSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactSvcClient interface {
	// 添加联系人
	AddContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactReply, error)
	// 获取联系人列表
	GetContactList(ctx context.Context, in *GetContactListRequest, opts ...grpc.CallOption) (*GetContactListReply, error)
	// 获取联系人列表
	GetSpecifiedContactList(ctx context.Context, in *GetSpecifiedContactListRequest, opts ...grpc.CallOption) (*GetSpecifiedContactListReply, error)
	// 获取联系人列表
	GetNearbyContactList(ctx context.Context, in *GetNearbyContactListRequest, opts ...grpc.CallOption) (*GetNearbyContactListReply, error)
	// 联系人信息
	GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactReply, error)
	// 获取聊天记录
	GetContactMessageList(ctx context.Context, in *GetContactMessageListRequest, opts ...grpc.CallOption) (*GetContactMessageListReply, error)
	// 发送消息
	SendContactMessage(ctx context.Context, in *SendContactMessageRequest, opts ...grpc.CallOption) (*SendContactMessageReply, error)
	// 设置联系人别名
	SetContactAlias(ctx context.Context, in *SetContactAliasRequest, opts ...grpc.CallOption) (*SetContactAliasReply, error)
	// 清空聊天记录
	ClearContactMessage(ctx context.Context, in *ClearContactMessageRequest, opts ...grpc.CallOption) (*ClearContactMessageReply, error)
	// 删除联系人
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactReply, error)
}

type contactSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewContactSvcClient(cc grpc.ClientConnInterface) ContactSvcClient {
	return &contactSvcClient{cc}
}

func (c *contactSvcClient) AddContact(ctx context.Context, in *AddContactRequest, opts ...grpc.CallOption) (*AddContactReply, error) {
	out := new(AddContactReply)
	err := c.cc.Invoke(ctx, ContactSvc_AddContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetContactList(ctx context.Context, in *GetContactListRequest, opts ...grpc.CallOption) (*GetContactListReply, error) {
	out := new(GetContactListReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetContactList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetSpecifiedContactList(ctx context.Context, in *GetSpecifiedContactListRequest, opts ...grpc.CallOption) (*GetSpecifiedContactListReply, error) {
	out := new(GetSpecifiedContactListReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetSpecifiedContactList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetNearbyContactList(ctx context.Context, in *GetNearbyContactListRequest, opts ...grpc.CallOption) (*GetNearbyContactListReply, error) {
	out := new(GetNearbyContactListReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetNearbyContactList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactReply, error) {
	out := new(GetContactReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) GetContactMessageList(ctx context.Context, in *GetContactMessageListRequest, opts ...grpc.CallOption) (*GetContactMessageListReply, error) {
	out := new(GetContactMessageListReply)
	err := c.cc.Invoke(ctx, ContactSvc_GetContactMessageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) SendContactMessage(ctx context.Context, in *SendContactMessageRequest, opts ...grpc.CallOption) (*SendContactMessageReply, error) {
	out := new(SendContactMessageReply)
	err := c.cc.Invoke(ctx, ContactSvc_SendContactMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) SetContactAlias(ctx context.Context, in *SetContactAliasRequest, opts ...grpc.CallOption) (*SetContactAliasReply, error) {
	out := new(SetContactAliasReply)
	err := c.cc.Invoke(ctx, ContactSvc_SetContactAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) ClearContactMessage(ctx context.Context, in *ClearContactMessageRequest, opts ...grpc.CallOption) (*ClearContactMessageReply, error) {
	out := new(ClearContactMessageReply)
	err := c.cc.Invoke(ctx, ContactSvc_ClearContactMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactSvcClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactReply, error) {
	out := new(DeleteContactReply)
	err := c.cc.Invoke(ctx, ContactSvc_DeleteContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactSvcServer is the server API for ContactSvc service.
// All implementations must embed UnimplementedContactSvcServer
// for forward compatibility
type ContactSvcServer interface {
	// 添加联系人
	AddContact(context.Context, *AddContactRequest) (*AddContactReply, error)
	// 获取联系人列表
	GetContactList(context.Context, *GetContactListRequest) (*GetContactListReply, error)
	// 获取联系人列表
	GetSpecifiedContactList(context.Context, *GetSpecifiedContactListRequest) (*GetSpecifiedContactListReply, error)
	// 获取联系人列表
	GetNearbyContactList(context.Context, *GetNearbyContactListRequest) (*GetNearbyContactListReply, error)
	// 联系人信息
	GetContact(context.Context, *GetContactRequest) (*GetContactReply, error)
	// 获取聊天记录
	GetContactMessageList(context.Context, *GetContactMessageListRequest) (*GetContactMessageListReply, error)
	// 发送消息
	SendContactMessage(context.Context, *SendContactMessageRequest) (*SendContactMessageReply, error)
	// 设置联系人别名
	SetContactAlias(context.Context, *SetContactAliasRequest) (*SetContactAliasReply, error)
	// 清空聊天记录
	ClearContactMessage(context.Context, *ClearContactMessageRequest) (*ClearContactMessageReply, error)
	// 删除联系人
	DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactReply, error)
	mustEmbedUnimplementedContactSvcServer()
}

// UnimplementedContactSvcServer must be embedded to have forward compatible implementations.
type UnimplementedContactSvcServer struct {
}

func (UnimplementedContactSvcServer) AddContact(context.Context, *AddContactRequest) (*AddContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContact not implemented")
}
func (UnimplementedContactSvcServer) GetContactList(context.Context, *GetContactListRequest) (*GetContactListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactList not implemented")
}
func (UnimplementedContactSvcServer) GetSpecifiedContactList(context.Context, *GetSpecifiedContactListRequest) (*GetSpecifiedContactListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecifiedContactList not implemented")
}
func (UnimplementedContactSvcServer) GetNearbyContactList(context.Context, *GetNearbyContactListRequest) (*GetNearbyContactListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearbyContactList not implemented")
}
func (UnimplementedContactSvcServer) GetContact(context.Context, *GetContactRequest) (*GetContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedContactSvcServer) GetContactMessageList(context.Context, *GetContactMessageListRequest) (*GetContactMessageListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactMessageList not implemented")
}
func (UnimplementedContactSvcServer) SendContactMessage(context.Context, *SendContactMessageRequest) (*SendContactMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendContactMessage not implemented")
}
func (UnimplementedContactSvcServer) SetContactAlias(context.Context, *SetContactAliasRequest) (*SetContactAliasReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContactAlias not implemented")
}
func (UnimplementedContactSvcServer) ClearContactMessage(context.Context, *ClearContactMessageRequest) (*ClearContactMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearContactMessage not implemented")
}
func (UnimplementedContactSvcServer) DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedContactSvcServer) mustEmbedUnimplementedContactSvcServer() {}

// UnsafeContactSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactSvcServer will
// result in compilation errors.
type UnsafeContactSvcServer interface {
	mustEmbedUnimplementedContactSvcServer()
}

func RegisterContactSvcServer(s grpc.ServiceRegistrar, srv ContactSvcServer) {
	s.RegisterService(&ContactSvc_ServiceDesc, srv)
}

func _ContactSvc_AddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).AddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_AddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).AddContact(ctx, req.(*AddContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetContactList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetContactList(ctx, req.(*GetContactListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetSpecifiedContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecifiedContactListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetSpecifiedContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetSpecifiedContactList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetSpecifiedContactList(ctx, req.(*GetSpecifiedContactListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetNearbyContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNearbyContactListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetNearbyContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetNearbyContactList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetNearbyContactList(ctx, req.(*GetNearbyContactListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetContact(ctx, req.(*GetContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_GetContactMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactMessageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).GetContactMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_GetContactMessageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).GetContactMessageList(ctx, req.(*GetContactMessageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_SendContactMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendContactMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).SendContactMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_SendContactMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).SendContactMessage(ctx, req.(*SendContactMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_SetContactAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetContactAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).SetContactAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_SetContactAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).SetContactAlias(ctx, req.(*SetContactAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_ClearContactMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearContactMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).ClearContactMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_ClearContactMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).ClearContactMessage(ctx, req.(*ClearContactMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactSvc_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactSvcServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactSvc_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactSvcServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactSvc_ServiceDesc is the grpc.ServiceDesc for ContactSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ContactSvc",
	HandlerType: (*ContactSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddContact",
			Handler:    _ContactSvc_AddContact_Handler,
		},
		{
			MethodName: "GetContactList",
			Handler:    _ContactSvc_GetContactList_Handler,
		},
		{
			MethodName: "GetSpecifiedContactList",
			Handler:    _ContactSvc_GetSpecifiedContactList_Handler,
		},
		{
			MethodName: "GetNearbyContactList",
			Handler:    _ContactSvc_GetNearbyContactList_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _ContactSvc_GetContact_Handler,
		},
		{
			MethodName: "GetContactMessageList",
			Handler:    _ContactSvc_GetContactMessageList_Handler,
		},
		{
			MethodName: "SendContactMessage",
			Handler:    _ContactSvc_SendContactMessage_Handler,
		},
		{
			MethodName: "SetContactAlias",
			Handler:    _ContactSvc_SetContactAlias_Handler,
		},
		{
			MethodName: "ClearContactMessage",
			Handler:    _ContactSvc_ClearContactMessage_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _ContactSvc_DeleteContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	GroupSvc_CreateGroup_FullMethodName         = "/chat.GroupSvc/CreateGroup"
	GroupSvc_GetGroupList_FullMethodName        = "/chat.GroupSvc/GetGroupList"
	GroupSvc_GetGroupBase_FullMethodName        = "/chat.GroupSvc/GetGroupBase"
	GroupSvc_GetGroupFull_FullMethodName        = "/chat.GroupSvc/GetGroupFull"
	GroupSvc_GetGroupMessageList_FullMethodName = "/chat.GroupSvc/GetGroupMessageList"
	GroupSvc_SendGroupMessage_FullMethodName    = "/chat.GroupSvc/SendGroupMessage"
	GroupSvc_SetGroupAvatar_FullMethodName      = "/chat.GroupSvc/SetGroupAvatar"
	GroupSvc_SetGroupAlias_FullMethodName       = "/chat.GroupSvc/SetGroupAlias"
	GroupSvc_SetGroupNotice_FullMethodName      = "/chat.GroupSvc/SetGroupNotice"
	GroupSvc_InviteJoinGroup_FullMethodName     = "/chat.GroupSvc/InviteJoinGroup"
	GroupSvc_GetGroupMemberList_FullMethodName  = "/chat.GroupSvc/GetGroupMemberList"
	GroupSvc_RemoveGroupMember_FullMethodName   = "/chat.GroupSvc/RemoveGroupMember"
	GroupSvc_SetJoinGroupReview_FullMethodName  = "/chat.GroupSvc/SetJoinGroupReview"
	GroupSvc_ClearGroupMessage_FullMethodName   = "/chat.GroupSvc/ClearGroupMessage"
	GroupSvc_ExitGroup_FullMethodName           = "/chat.GroupSvc/ExitGroup"
	GroupSvc_DeleteGroup_FullMethodName         = "/chat.GroupSvc/DeleteGroup"
)

// GroupSvcClient is the client API for GroupSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupSvcClient interface {
	// 创建群
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupReply, error)
	// 获取群列表
	GetGroupList(ctx context.Context, in *GetGroupListRequest, opts ...grpc.CallOption) (*GetGroupListReply, error)
	// 获取群基本信息
	GetGroupBase(ctx context.Context, in *GetGroupBaseRequest, opts ...grpc.CallOption) (*GetGroupBaseReply, error)
	// 获取群完整信息
	GetGroupFull(ctx context.Context, in *GetGroupFullRequest, opts ...grpc.CallOption) (*GetGroupFullReply, error)
	// 获取聊天记录
	GetGroupMessageList(ctx context.Context, in *GetGroupMessageListRequest, opts ...grpc.CallOption) (*GetGroupMessageListReply, error)
	// 发送消息
	SendGroupMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*SendGroupMessageReply, error)
	// 设置头像（管理员操作）
	SetGroupAvatar(ctx context.Context, in *SetGroupAvatarRequest, opts ...grpc.CallOption) (*SetGroupAvatarReply, error)
	// 设置别名
	SetGroupAlias(ctx context.Context, in *SetGroupAliasRequest, opts ...grpc.CallOption) (*SetGroupAliasReply, error)
	// 设置群公告
	SetGroupNotice(ctx context.Context, in *SetGroupNoticeRequest, opts ...grpc.CallOption) (*SetGroupNoticeReply, error)
	// 邀请群成员
	InviteJoinGroup(ctx context.Context, in *InviteJoinGroupRequest, opts ...grpc.CallOption) (*InviteJoinGroupReply, error)
	// 群成员列表
	GetGroupMemberList(ctx context.Context, in *GetGroupMemberListRequest, opts ...grpc.CallOption) (*GetGroupMemberListReply, error)
	// 移除群成员
	RemoveGroupMember(ctx context.Context, in *RemoveGroupMemberRequest, opts ...grpc.CallOption) (*RemoveGroupMemberReply, error)
	// 设置入群是否审核
	SetJoinGroupReview(ctx context.Context, in *SetJoinGroupReviewRequest, opts ...grpc.CallOption) (*SetJoinGroupReviewReply, error)
	// 清空聊天记录
	ClearGroupMessage(ctx context.Context, in *ClearGroupMessageRequest, opts ...grpc.CallOption) (*ClearGroupMessageReply, error)
	// 退出此群
	ExitGroup(ctx context.Context, in *ExitGroupRequest, opts ...grpc.CallOption) (*ExitGroupReply, error)
	// 删除此群
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupReply, error)
}

type groupSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupSvcClient(cc grpc.ClientConnInterface) GroupSvcClient {
	return &groupSvcClient{cc}
}

func (c *groupSvcClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupReply, error) {
	out := new(CreateGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroupList(ctx context.Context, in *GetGroupListRequest, opts ...grpc.CallOption) (*GetGroupListReply, error) {
	out := new(GetGroupListReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroupList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroupBase(ctx context.Context, in *GetGroupBaseRequest, opts ...grpc.CallOption) (*GetGroupBaseReply, error) {
	out := new(GetGroupBaseReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroupBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroupFull(ctx context.Context, in *GetGroupFullRequest, opts ...grpc.CallOption) (*GetGroupFullReply, error) {
	out := new(GetGroupFullReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroupFull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroupMessageList(ctx context.Context, in *GetGroupMessageListRequest, opts ...grpc.CallOption) (*GetGroupMessageListReply, error) {
	out := new(GetGroupMessageListReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroupMessageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SendGroupMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*SendGroupMessageReply, error) {
	out := new(SendGroupMessageReply)
	err := c.cc.Invoke(ctx, GroupSvc_SendGroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SetGroupAvatar(ctx context.Context, in *SetGroupAvatarRequest, opts ...grpc.CallOption) (*SetGroupAvatarReply, error) {
	out := new(SetGroupAvatarReply)
	err := c.cc.Invoke(ctx, GroupSvc_SetGroupAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SetGroupAlias(ctx context.Context, in *SetGroupAliasRequest, opts ...grpc.CallOption) (*SetGroupAliasReply, error) {
	out := new(SetGroupAliasReply)
	err := c.cc.Invoke(ctx, GroupSvc_SetGroupAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SetGroupNotice(ctx context.Context, in *SetGroupNoticeRequest, opts ...grpc.CallOption) (*SetGroupNoticeReply, error) {
	out := new(SetGroupNoticeReply)
	err := c.cc.Invoke(ctx, GroupSvc_SetGroupNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) InviteJoinGroup(ctx context.Context, in *InviteJoinGroupRequest, opts ...grpc.CallOption) (*InviteJoinGroupReply, error) {
	out := new(InviteJoinGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_InviteJoinGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) GetGroupMemberList(ctx context.Context, in *GetGroupMemberListRequest, opts ...grpc.CallOption) (*GetGroupMemberListReply, error) {
	out := new(GetGroupMemberListReply)
	err := c.cc.Invoke(ctx, GroupSvc_GetGroupMemberList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) RemoveGroupMember(ctx context.Context, in *RemoveGroupMemberRequest, opts ...grpc.CallOption) (*RemoveGroupMemberReply, error) {
	out := new(RemoveGroupMemberReply)
	err := c.cc.Invoke(ctx, GroupSvc_RemoveGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) SetJoinGroupReview(ctx context.Context, in *SetJoinGroupReviewRequest, opts ...grpc.CallOption) (*SetJoinGroupReviewReply, error) {
	out := new(SetJoinGroupReviewReply)
	err := c.cc.Invoke(ctx, GroupSvc_SetJoinGroupReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) ClearGroupMessage(ctx context.Context, in *ClearGroupMessageRequest, opts ...grpc.CallOption) (*ClearGroupMessageReply, error) {
	out := new(ClearGroupMessageReply)
	err := c.cc.Invoke(ctx, GroupSvc_ClearGroupMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) ExitGroup(ctx context.Context, in *ExitGroupRequest, opts ...grpc.CallOption) (*ExitGroupReply, error) {
	out := new(ExitGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_ExitGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupSvcClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupReply, error) {
	out := new(DeleteGroupReply)
	err := c.cc.Invoke(ctx, GroupSvc_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupSvcServer is the server API for GroupSvc service.
// All implementations must embed UnimplementedGroupSvcServer
// for forward compatibility
type GroupSvcServer interface {
	// 创建群
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupReply, error)
	// 获取群列表
	GetGroupList(context.Context, *GetGroupListRequest) (*GetGroupListReply, error)
	// 获取群基本信息
	GetGroupBase(context.Context, *GetGroupBaseRequest) (*GetGroupBaseReply, error)
	// 获取群完整信息
	GetGroupFull(context.Context, *GetGroupFullRequest) (*GetGroupFullReply, error)
	// 获取聊天记录
	GetGroupMessageList(context.Context, *GetGroupMessageListRequest) (*GetGroupMessageListReply, error)
	// 发送消息
	SendGroupMessage(context.Context, *SendGroupMessageRequest) (*SendGroupMessageReply, error)
	// 设置头像（管理员操作）
	SetGroupAvatar(context.Context, *SetGroupAvatarRequest) (*SetGroupAvatarReply, error)
	// 设置别名
	SetGroupAlias(context.Context, *SetGroupAliasRequest) (*SetGroupAliasReply, error)
	// 设置群公告
	SetGroupNotice(context.Context, *SetGroupNoticeRequest) (*SetGroupNoticeReply, error)
	// 邀请群成员
	InviteJoinGroup(context.Context, *InviteJoinGroupRequest) (*InviteJoinGroupReply, error)
	// 群成员列表
	GetGroupMemberList(context.Context, *GetGroupMemberListRequest) (*GetGroupMemberListReply, error)
	// 移除群成员
	RemoveGroupMember(context.Context, *RemoveGroupMemberRequest) (*RemoveGroupMemberReply, error)
	// 设置入群是否审核
	SetJoinGroupReview(context.Context, *SetJoinGroupReviewRequest) (*SetJoinGroupReviewReply, error)
	// 清空聊天记录
	ClearGroupMessage(context.Context, *ClearGroupMessageRequest) (*ClearGroupMessageReply, error)
	// 退出此群
	ExitGroup(context.Context, *ExitGroupRequest) (*ExitGroupReply, error)
	// 删除此群
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupReply, error)
	mustEmbedUnimplementedGroupSvcServer()
}

// UnimplementedGroupSvcServer must be embedded to have forward compatible implementations.
type UnimplementedGroupSvcServer struct {
}

func (UnimplementedGroupSvcServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupSvcServer) GetGroupList(context.Context, *GetGroupListRequest) (*GetGroupListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupList not implemented")
}
func (UnimplementedGroupSvcServer) GetGroupBase(context.Context, *GetGroupBaseRequest) (*GetGroupBaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupBase not implemented")
}
func (UnimplementedGroupSvcServer) GetGroupFull(context.Context, *GetGroupFullRequest) (*GetGroupFullReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupFull not implemented")
}
func (UnimplementedGroupSvcServer) GetGroupMessageList(context.Context, *GetGroupMessageListRequest) (*GetGroupMessageListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMessageList not implemented")
}
func (UnimplementedGroupSvcServer) SendGroupMessage(context.Context, *SendGroupMessageRequest) (*SendGroupMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMessage not implemented")
}
func (UnimplementedGroupSvcServer) SetGroupAvatar(context.Context, *SetGroupAvatarRequest) (*SetGroupAvatarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupAvatar not implemented")
}
func (UnimplementedGroupSvcServer) SetGroupAlias(context.Context, *SetGroupAliasRequest) (*SetGroupAliasReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupAlias not implemented")
}
func (UnimplementedGroupSvcServer) SetGroupNotice(context.Context, *SetGroupNoticeRequest) (*SetGroupNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupNotice not implemented")
}
func (UnimplementedGroupSvcServer) InviteJoinGroup(context.Context, *InviteJoinGroupRequest) (*InviteJoinGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteJoinGroup not implemented")
}
func (UnimplementedGroupSvcServer) GetGroupMemberList(context.Context, *GetGroupMemberListRequest) (*GetGroupMemberListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMemberList not implemented")
}
func (UnimplementedGroupSvcServer) RemoveGroupMember(context.Context, *RemoveGroupMemberRequest) (*RemoveGroupMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupMember not implemented")
}
func (UnimplementedGroupSvcServer) SetJoinGroupReview(context.Context, *SetJoinGroupReviewRequest) (*SetJoinGroupReviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJoinGroupReview not implemented")
}
func (UnimplementedGroupSvcServer) ClearGroupMessage(context.Context, *ClearGroupMessageRequest) (*ClearGroupMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearGroupMessage not implemented")
}
func (UnimplementedGroupSvcServer) ExitGroup(context.Context, *ExitGroupRequest) (*ExitGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitGroup not implemented")
}
func (UnimplementedGroupSvcServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupSvcServer) mustEmbedUnimplementedGroupSvcServer() {}

// UnsafeGroupSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupSvcServer will
// result in compilation errors.
type UnsafeGroupSvcServer interface {
	mustEmbedUnimplementedGroupSvcServer()
}

func RegisterGroupSvcServer(s grpc.ServiceRegistrar, srv GroupSvcServer) {
	s.RegisterService(&GroupSvc_ServiceDesc, srv)
}

func _GroupSvc_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroupList(ctx, req.(*GetGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroupBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroupBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroupBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroupBase(ctx, req.(*GetGroupBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroupFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroupFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroupFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroupFull(ctx, req.(*GetGroupFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroupMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMessageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroupMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroupMessageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroupMessageList(ctx, req.(*GetGroupMessageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SendGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SendGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SendGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SendGroupMessage(ctx, req.(*SendGroupMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SetGroupAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SetGroupAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SetGroupAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SetGroupAvatar(ctx, req.(*SetGroupAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SetGroupAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SetGroupAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SetGroupAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SetGroupAlias(ctx, req.(*SetGroupAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SetGroupNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SetGroupNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SetGroupNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SetGroupNotice(ctx, req.(*SetGroupNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_InviteJoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteJoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).InviteJoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_InviteJoinGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).InviteJoinGroup(ctx, req.(*InviteJoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_GetGroupMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).GetGroupMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_GetGroupMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).GetGroupMemberList(ctx, req.(*GetGroupMemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_RemoveGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).RemoveGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_RemoveGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).RemoveGroupMember(ctx, req.(*RemoveGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_SetJoinGroupReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJoinGroupReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).SetJoinGroupReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_SetJoinGroupReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).SetJoinGroupReview(ctx, req.(*SetJoinGroupReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_ClearGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearGroupMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).ClearGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_ClearGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).ClearGroupMessage(ctx, req.(*ClearGroupMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_ExitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).ExitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_ExitGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).ExitGroup(ctx, req.(*ExitGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupSvc_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupSvcServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupSvc_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupSvcServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupSvc_ServiceDesc is the grpc.ServiceDesc for GroupSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.GroupSvc",
	HandlerType: (*GroupSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupSvc_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroupList",
			Handler:    _GroupSvc_GetGroupList_Handler,
		},
		{
			MethodName: "GetGroupBase",
			Handler:    _GroupSvc_GetGroupBase_Handler,
		},
		{
			MethodName: "GetGroupFull",
			Handler:    _GroupSvc_GetGroupFull_Handler,
		},
		{
			MethodName: "GetGroupMessageList",
			Handler:    _GroupSvc_GetGroupMessageList_Handler,
		},
		{
			MethodName: "SendGroupMessage",
			Handler:    _GroupSvc_SendGroupMessage_Handler,
		},
		{
			MethodName: "SetGroupAvatar",
			Handler:    _GroupSvc_SetGroupAvatar_Handler,
		},
		{
			MethodName: "SetGroupAlias",
			Handler:    _GroupSvc_SetGroupAlias_Handler,
		},
		{
			MethodName: "SetGroupNotice",
			Handler:    _GroupSvc_SetGroupNotice_Handler,
		},
		{
			MethodName: "InviteJoinGroup",
			Handler:    _GroupSvc_InviteJoinGroup_Handler,
		},
		{
			MethodName: "GetGroupMemberList",
			Handler:    _GroupSvc_GetGroupMemberList_Handler,
		},
		{
			MethodName: "RemoveGroupMember",
			Handler:    _GroupSvc_RemoveGroupMember_Handler,
		},
		{
			MethodName: "SetJoinGroupReview",
			Handler:    _GroupSvc_SetJoinGroupReview_Handler,
		},
		{
			MethodName: "ClearGroupMessage",
			Handler:    _GroupSvc_ClearGroupMessage_Handler,
		},
		{
			MethodName: "ExitGroup",
			Handler:    _GroupSvc_ExitGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupSvc_DeleteGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	SessionSvc_GetSessionList_FullMethodName = "/chat.SessionSvc/GetSessionList"
)

// SessionSvcClient is the client API for SessionSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionSvcClient interface {
	GetSessionList(ctx context.Context, in *GetSessionListRequest, opts ...grpc.CallOption) (*GetSessionListReply, error)
}

type sessionSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionSvcClient(cc grpc.ClientConnInterface) SessionSvcClient {
	return &sessionSvcClient{cc}
}

func (c *sessionSvcClient) GetSessionList(ctx context.Context, in *GetSessionListRequest, opts ...grpc.CallOption) (*GetSessionListReply, error) {
	out := new(GetSessionListReply)
	err := c.cc.Invoke(ctx, SessionSvc_GetSessionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionSvcServer is the server API for SessionSvc service.
// All implementations must embed UnimplementedSessionSvcServer
// for forward compatibility
type SessionSvcServer interface {
	GetSessionList(context.Context, *GetSessionListRequest) (*GetSessionListReply, error)
	mustEmbedUnimplementedSessionSvcServer()
}

// UnimplementedSessionSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSessionSvcServer struct {
}

func (UnimplementedSessionSvcServer) GetSessionList(context.Context, *GetSessionListRequest) (*GetSessionListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionList not implemented")
}
func (UnimplementedSessionSvcServer) mustEmbedUnimplementedSessionSvcServer() {}

// UnsafeSessionSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionSvcServer will
// result in compilation errors.
type UnsafeSessionSvcServer interface {
	mustEmbedUnimplementedSessionSvcServer()
}

func RegisterSessionSvcServer(s grpc.ServiceRegistrar, srv SessionSvcServer) {
	s.RegisterService(&SessionSvc_ServiceDesc, srv)
}

func _SessionSvc_GetSessionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionSvcServer).GetSessionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionSvc_GetSessionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionSvcServer).GetSessionList(ctx, req.(*GetSessionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionSvc_ServiceDesc is the grpc.ServiceDesc for SessionSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.SessionSvc",
	HandlerType: (*SessionSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSessionList",
			Handler:    _SessionSvc_GetSessionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}

const (
	SystemSvc_GetSystemMessageList_FullMethodName = "/chat.SystemSvc/GetSystemMessageList"
	SystemSvc_ClearSystemMessage_FullMethodName   = "/chat.SystemSvc/ClearSystemMessage"
)

// SystemSvcClient is the client API for SystemSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemSvcClient interface {
	GetSystemMessageList(ctx context.Context, in *GetMessageListRequest, opts ...grpc.CallOption) (*GetMessageListReply, error)
	ClearSystemMessage(ctx context.Context, in *ClearSystemMessageRequest, opts ...grpc.CallOption) (*ClearSystemMessageReply, error)
}

type systemSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemSvcClient(cc grpc.ClientConnInterface) SystemSvcClient {
	return &systemSvcClient{cc}
}

func (c *systemSvcClient) GetSystemMessageList(ctx context.Context, in *GetMessageListRequest, opts ...grpc.CallOption) (*GetMessageListReply, error) {
	out := new(GetMessageListReply)
	err := c.cc.Invoke(ctx, SystemSvc_GetSystemMessageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) ClearSystemMessage(ctx context.Context, in *ClearSystemMessageRequest, opts ...grpc.CallOption) (*ClearSystemMessageReply, error) {
	out := new(ClearSystemMessageReply)
	err := c.cc.Invoke(ctx, SystemSvc_ClearSystemMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemSvcServer is the server API for SystemSvc service.
// All implementations must embed UnimplementedSystemSvcServer
// for forward compatibility
type SystemSvcServer interface {
	GetSystemMessageList(context.Context, *GetMessageListRequest) (*GetMessageListReply, error)
	ClearSystemMessage(context.Context, *ClearSystemMessageRequest) (*ClearSystemMessageReply, error)
	mustEmbedUnimplementedSystemSvcServer()
}

// UnimplementedSystemSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSystemSvcServer struct {
}

func (UnimplementedSystemSvcServer) GetSystemMessageList(context.Context, *GetMessageListRequest) (*GetMessageListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemMessageList not implemented")
}
func (UnimplementedSystemSvcServer) ClearSystemMessage(context.Context, *ClearSystemMessageRequest) (*ClearSystemMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSystemMessage not implemented")
}
func (UnimplementedSystemSvcServer) mustEmbedUnimplementedSystemSvcServer() {}

// UnsafeSystemSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemSvcServer will
// result in compilation errors.
type UnsafeSystemSvcServer interface {
	mustEmbedUnimplementedSystemSvcServer()
}

func RegisterSystemSvcServer(s grpc.ServiceRegistrar, srv SystemSvcServer) {
	s.RegisterService(&SystemSvc_ServiceDesc, srv)
}

func _SystemSvc_GetSystemMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).GetSystemMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemSvc_GetSystemMessageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).GetSystemMessageList(ctx, req.(*GetMessageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_ClearSystemMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearSystemMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).ClearSystemMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemSvc_ClearSystemMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).ClearSystemMessage(ctx, req.(*ClearSystemMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemSvc_ServiceDesc is the grpc.ServiceDesc for SystemSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.SystemSvc",
	HandlerType: (*SystemSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemMessageList",
			Handler:    _SystemSvc_GetSystemMessageList_Handler,
		},
		{
			MethodName: "ClearSystemMessage",
			Handler:    _SystemSvc_ClearSystemMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bind/grpc/proto/chat.proto",
}
